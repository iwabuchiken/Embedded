;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 2012/12/19 15:04:29
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$0097	$	GlobalIniex_2_1:
$0097	$3010			MOVLW	16
$0098	$1303			BCF	STATUS, RP1
$0099	$1283			BCF	STATUS, RP0
$009A	$008C			MOVWF	_num+0
$009B	$3027			MOVLW	39
$009C	$008D			MOVWF	_num+1
$009D	$300A			MOVLW	10
$009E	$008E			MOVWF	_num2+0
$009F	$3000			MOVLW	0
$00A0	$008F			MOVWF	_num2+1
$00A1	$0008			RETURN
$0004	$	_main:
;ex_2_1.c,12 :: 		void main(void) {
;ex_2_1.c,14 :: 		TRISA = 0x00;
$0004	$2097			CALL	GlobalIniex_2_1
$0005	$1683			BSF	STATUS, RP0
$0006	$0185			CLRF	TRISA, 1
;ex_2_1.c,15 :: 		PORTA = 0x07;  // 0000 0111
$0007	$3007			MOVLW	7
$0008	$1283			BCF	STATUS, RP0
$0009	$0085			MOVWF	PORTA
;ex_2_1.c,17 :: 		TRISB = 0x00;
$000A	$1683			BSF	STATUS, RP0
$000B	$0186			CLRF	TRISB, 1
;ex_2_1.c,18 :: 		PORTB = 0x00;
$000C	$1283			BCF	STATUS, RP0
$000D	$0186			CLRF	PORTB, 1
;ex_2_1.c,20 :: 		while(1)
$000E	$	L_main_0:
;ex_2_1.c,22 :: 		PORTA = 0x00;    // 0000
$000E	$0185			CLRF	PORTA, 1
;ex_2_1.c,24 :: 		Delay_ms(1000);
$000F	$301A			MOVLW	26
$0010	$00CC			MOVWF	STACK_12
$0011	$30FF			MOVLW	255
$0012	$00CB			MOVWF	STACK_11
$0013	$30FF			MOVLW	255
$0014	$00CA			MOVWF	STACK_10
$0015	$0BCC			DECFSZ	STACK_12, F
$0016	$2818			GOTO	$+2
$0017	$281F			GOTO	$+8
$0018	$0BCB			DECFSZ	STACK_11, F
$0019	$281B			GOTO	$+2
$001A	$281E			GOTO	$+4
$001B	$0BCA			DECFSZ	STACK_10, F
$001C	$281B			GOTO	$-1
$001D	$2818			GOTO	$-5
$001E	$2815			GOTO	$-9
$001F	$307F			MOVLW	127
$0020	$00CB			MOVWF	STACK_11
$0021	$30FF			MOVLW	255
$0022	$00CA			MOVWF	STACK_10
$0023	$0BCB			DECFSZ	STACK_11, F
$0024	$2826			GOTO	$+2
$0025	$2829			GOTO	$+4
$0026	$0BCA			DECFSZ	STACK_10, F
$0027	$2826			GOTO	$-1
$0028	$2823			GOTO	$-5
$0029	$3058			MOVLW	88
$002A	$00CA			MOVWF	STACK_10
$002B	$0BCA			DECFSZ	STACK_10, F
$002C	$282B			GOTO	$-1
$002D	$0000			NOP
$002E	$0000			NOP
;ex_2_1.c,27 :: 		PORTA = 0x04;  // 0100
$002F	$3004			MOVLW	4
$0030	$0085			MOVWF	PORTA
;ex_2_1.c,29 :: 		Delay_ms(1000);
$0031	$301A			MOVLW	26
$0032	$00CC			MOVWF	STACK_12
$0033	$30FF			MOVLW	255
$0034	$00CB			MOVWF	STACK_11
$0035	$30FF			MOVLW	255
$0036	$00CA			MOVWF	STACK_10
$0037	$0BCC			DECFSZ	STACK_12, F
$0038	$283A			GOTO	$+2
$0039	$2841			GOTO	$+8
$003A	$0BCB			DECFSZ	STACK_11, F
$003B	$283D			GOTO	$+2
$003C	$2840			GOTO	$+4
$003D	$0BCA			DECFSZ	STACK_10, F
$003E	$283D			GOTO	$-1
$003F	$283A			GOTO	$-5
$0040	$2837			GOTO	$-9
$0041	$307F			MOVLW	127
$0042	$00CB			MOVWF	STACK_11
$0043	$30FF			MOVLW	255
$0044	$00CA			MOVWF	STACK_10
$0045	$0BCB			DECFSZ	STACK_11, F
$0046	$2848			GOTO	$+2
$0047	$284B			GOTO	$+4
$0048	$0BCA			DECFSZ	STACK_10, F
$0049	$2848			GOTO	$-1
$004A	$2845			GOTO	$-5
$004B	$3058			MOVLW	88
$004C	$00CA			MOVWF	STACK_10
$004D	$0BCA			DECFSZ	STACK_10, F
$004E	$284D			GOTO	$-1
$004F	$0000			NOP
$0050	$0000			NOP
;ex_2_1.c,31 :: 		PORTA = 0x02;  // 0010
$0051	$3002			MOVLW	2
$0052	$0085			MOVWF	PORTA
;ex_2_1.c,33 :: 		Delay_ms(1000);
$0053	$301A			MOVLW	26
$0054	$00CC			MOVWF	STACK_12
$0055	$30FF			MOVLW	255
$0056	$00CB			MOVWF	STACK_11
$0057	$30FF			MOVLW	255
$0058	$00CA			MOVWF	STACK_10
$0059	$0BCC			DECFSZ	STACK_12, F
$005A	$285C			GOTO	$+2
$005B	$2863			GOTO	$+8
$005C	$0BCB			DECFSZ	STACK_11, F
$005D	$285F			GOTO	$+2
$005E	$2862			GOTO	$+4
$005F	$0BCA			DECFSZ	STACK_10, F
$0060	$285F			GOTO	$-1
$0061	$285C			GOTO	$-5
$0062	$2859			GOTO	$-9
$0063	$307F			MOVLW	127
$0064	$00CB			MOVWF	STACK_11
$0065	$30FF			MOVLW	255
$0066	$00CA			MOVWF	STACK_10
$0067	$0BCB			DECFSZ	STACK_11, F
$0068	$286A			GOTO	$+2
$0069	$286D			GOTO	$+4
$006A	$0BCA			DECFSZ	STACK_10, F
$006B	$286A			GOTO	$-1
$006C	$2867			GOTO	$-5
$006D	$3058			MOVLW	88
$006E	$00CA			MOVWF	STACK_10
$006F	$0BCA			DECFSZ	STACK_10, F
$0070	$286F			GOTO	$-1
$0071	$0000			NOP
$0072	$0000			NOP
;ex_2_1.c,35 :: 		PORTA = 0x01;  // 0001
$0073	$3001			MOVLW	1
$0074	$0085			MOVWF	PORTA
;ex_2_1.c,37 :: 		Delay_ms(1000);
$0075	$301A			MOVLW	26
$0076	$00CC			MOVWF	STACK_12
$0077	$30FF			MOVLW	255
$0078	$00CB			MOVWF	STACK_11
$0079	$30FF			MOVLW	255
$007A	$00CA			MOVWF	STACK_10
$007B	$0BCC			DECFSZ	STACK_12, F
$007C	$287E			GOTO	$+2
$007D	$2885			GOTO	$+8
$007E	$0BCB			DECFSZ	STACK_11, F
$007F	$2881			GOTO	$+2
$0080	$2884			GOTO	$+4
$0081	$0BCA			DECFSZ	STACK_10, F
$0082	$2881			GOTO	$-1
$0083	$287E			GOTO	$-5
$0084	$287B			GOTO	$-9
$0085	$307F			MOVLW	127
$0086	$00CB			MOVWF	STACK_11
$0087	$30FF			MOVLW	255
$0088	$00CA			MOVWF	STACK_10
$0089	$0BCB			DECFSZ	STACK_11, F
$008A	$288C			GOTO	$+2
$008B	$288F			GOTO	$+4
$008C	$0BCA			DECFSZ	STACK_10, F
$008D	$288C			GOTO	$-1
$008E	$2889			GOTO	$-5
$008F	$3058			MOVLW	88
$0090	$00CA			MOVWF	STACK_10
$0091	$0BCA			DECFSZ	STACK_10, F
$0092	$2891			GOTO	$-1
$0093	$0000			NOP
$0094	$0000			NOP
;ex_2_1.c,39 :: 		}//while(1)
$0095	$280E			GOTO	L_main_0
;ex_2_1.c,41 :: 		}
$0096	$2896			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$0097		GlobalIniex_2_1


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$000E		L_main_0:
$0097		GlobalIniex_2_1:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0006		PORTB
$000A		PCLATH
$000C		_num
$000E		_num2
$0040		STACK_0
$0041		STACK_1
$0042		STACK_2
$0043		STACK_3
$0044		STACK_4
$0045		STACK_5
$0046		STACK_6
$0047		STACK_7
$0048		STACK_8
$0049		STACK_9
$004A		STACK_10
$004B		STACK_11
$004C		STACK_12
$004D		STACK_13
$004E		STACK_14
$004F		STACK_15
$0085		TRISA
$0086		TRISB


