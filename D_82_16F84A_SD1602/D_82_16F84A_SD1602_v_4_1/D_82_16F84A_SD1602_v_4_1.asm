;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 2014/03/07 15:11:48
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$28D5			GOTO	_main
$0004	$	_interrupt:
$0004	$00CF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$00AE			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$00AD			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$00AF			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$084C			MOVF	STACK_12, 0
$000E	$00BA			MOVWF	STSAVED_12
$000F	$084B			MOVF	STACK_11, 0
$0010	$00B9			MOVWF	STSAVED_11
$0011	$084A			MOVF	STACK_10, 0
$0012	$00B8			MOVWF	STSAVED_10
$0013	$0841			MOVF	STACK_1, 0
$0014	$00B7			MOVWF	STSAVED_1
$0015	$0840			MOVF	STACK_0, 0
$0016	$00B6			MOVWF	STSAVED_0
;D_82_16F84A_SD1602_v_4_1.c,12 :: 		void interrupt(void)
;D_82_16F84A_SD1602_v_4_1.c,14 :: 		INTCON         &= 0x7F;
$0017	$307F			MOVLW	127
$0018	$058B			ANDWF	INTCON, 1
;D_82_16F84A_SD1602_v_4_1.c,15 :: 		INTCON         &= 0xEF;
$0019	$30EF			MOVLW	239
$001A	$058B			ANDWF	INTCON, 1
;D_82_16F84A_SD1602_v_4_1.c,16 :: 		INTCON         &= 0xFD;
$001B	$30FD			MOVLW	253
$001C	$058B			ANDWF	INTCON, 1
;D_82_16F84A_SD1602_v_4_1.c,18 :: 		Delay_ms(20);
$001D	$3082			MOVLW	130
$001E	$00CB			MOVWF	STACK_11
$001F	$30FF			MOVLW	255
$0020	$00CA			MOVWF	STACK_10
$0021	$0BCB			DECFSZ	STACK_11, F
$0022	$2824			GOTO	$+2
$0023	$2827			GOTO	$+4
$0024	$0BCA			DECFSZ	STACK_10, F
$0025	$2824			GOTO	$-1
$0026	$2821			GOTO	$-5
$0027	$3087			MOVLW	135
$0028	$00CA			MOVWF	STACK_10
$0029	$0BCA			DECFSZ	STACK_10, F
$002A	$2829			GOTO	$-1
$002B	$0000			NOP
;D_82_16F84A_SD1602_v_4_1.c,20 :: 		if((PORTB & 0x01) == 0)
$002C	$3001			MOVLW	1
$002D	$0506			ANDWF	PORTB, 0
$002E	$00C1			MOVWF	STACK_1
$002F	$0841			MOVF	STACK_1, 0
$0030	$3A00			XORLW	0
$0031	$1D03			BTFSS	STATUS, Z
$0032	$2852			GOTO	L_interrupt_6
;D_82_16F84A_SD1602_v_4_1.c,22 :: 		Delay_ms(2000);
$0033	$3033			MOVLW	51
$0034	$00CC			MOVWF	STACK_12
$0035	$30FF			MOVLW	255
$0036	$00CB			MOVWF	STACK_11
$0037	$30FF			MOVLW	255
$0038	$00CA			MOVWF	STACK_10
$0039	$0BCC			DECFSZ	STACK_12, F
$003A	$283C			GOTO	$+2
$003B	$2843			GOTO	$+8
$003C	$0BCB			DECFSZ	STACK_11, F
$003D	$283F			GOTO	$+2
$003E	$2842			GOTO	$+4
$003F	$0BCA			DECFSZ	STACK_10, F
$0040	$283F			GOTO	$-1
$0041	$283C			GOTO	$-5
$0042	$2839			GOTO	$-9
$0043	$30FD			MOVLW	253
$0044	$00CB			MOVWF	STACK_11
$0045	$30FF			MOVLW	255
$0046	$00CA			MOVWF	STACK_10
$0047	$0BCB			DECFSZ	STACK_11, F
$0048	$284A			GOTO	$+2
$0049	$284D			GOTO	$+4
$004A	$0BCA			DECFSZ	STACK_10, F
$004B	$284A			GOTO	$-1
$004C	$2847			GOTO	$-5
$004D	$30B5			MOVLW	181
$004E	$00CA			MOVWF	STACK_10
$004F	$0BCA			DECFSZ	STACK_10, F
$0050	$284F			GOTO	$-1
$0051	$0000			NOP
;D_82_16F84A_SD1602_v_4_1.c,30 :: 		}
$0052	$	L_interrupt_6:
;D_82_16F84A_SD1602_v_4_1.c,32 :: 		INTCON         |= 0x10;
$0052	$160B			BSF	INTCON, 4
;D_82_16F84A_SD1602_v_4_1.c,33 :: 		INTCON         |= 0x80;
$0053	$178B			BSF	INTCON, 7
;D_82_16F84A_SD1602_v_4_1.c,35 :: 		}//void interrupt(void)
$0054	$	L_Interrupt_end:
$0054	$083A			MOVF	STSAVED_12, 0
$0055	$00CC			MOVWF	STACK_12
$0056	$0839			MOVF	STSAVED_11, 0
$0057	$00CB			MOVWF	STACK_11
$0058	$0838			MOVF	STSAVED_10, 0
$0059	$00CA			MOVWF	STACK_10
$005A	$0837			MOVF	STSAVED_1, 0
$005B	$00C1			MOVWF	STACK_1
$005C	$0836			MOVF	STSAVED_0, 0
$005D	$00C0			MOVWF	STACK_0
$005E	$082F			MOVF	?savePCLATH, 0
$005F	$008A			MOVWF	PCLATH
$0060	$082D			MOVF	?saveFSR, 0
$0061	$0084			MOVWF	FSR
$0062	$0E2E			SWAPF	?saveSTATUS, 0
$0063	$0083			MOVWF	STATUS
$0064	$0ECF			SWAPF	STACK_15, 1
$0065	$0E4F			SWAPF	STACK_15, 0
$0066	$0009			RETFIE
$0163	$	_SD1602_write:
;sd1602_4bit_mode.h,1 :: 		void SD1602_write(char c, char r)
;sd1602_4bit_mode.h,3 :: 		PORTB = c & 0xF0; /* RB4〜RB7にデータの上位4bitをセットする */
$0163	$30F0			MOVLW	240
$0164	$1303			BCF	STATUS, RP1
$0165	$1283			BCF	STATUS, RP0
$0166	$0534			ANDWF	FARG_SD1602_write+0, 0
$0167	$0086			MOVWF	PORTB
;sd1602_4bit_mode.h,5 :: 		if (r == 1) /* 文字コードの場合 */
$0168	$0835			MOVF	FARG_SD1602_write+1, 0
$0169	$3A01			XORLW	1
$016A	$1D03			BTFSS	STATUS, Z
$016B	$296E			GOTO	L_SD1602_write_0
;sd1602_4bit_mode.h,7 :: 		PORTA |= 0x02; /* RSを1にする */
$016C	$1485			BSF	PORTA, 1
;sd1602_4bit_mode.h,8 :: 		}
$016D	$2970			GOTO	L_SD1602_write_1
$016E	$	L_SD1602_write_0:
;sd1602_4bit_mode.h,11 :: 		PORTA &= 0xFD; /* RSを0にする */
$016E	$30FD			MOVLW	253
$016F	$0585			ANDWF	PORTA, 1
;sd1602_4bit_mode.h,12 :: 		}
$0170	$	L_SD1602_write_1:
;sd1602_4bit_mode.h,14 :: 		PORTA &= 0xFE; /* Eを0にする */
$0170	$30FE			MOVLW	254
$0171	$0585			ANDWF	PORTA, 1
;sd1602_4bit_mode.h,15 :: 		Delay_us(1); /* 1us（40ns以上）の時間待ち */
$0172	$3001			MOVLW	1
$0173	$00CA			MOVWF	STACK_10
$0174	$0BCA			DECFSZ	STACK_10, F
$0175	$2974			GOTO	$-1
$0176	$0000			NOP
;sd1602_4bit_mode.h,16 :: 		PORTA |= 0x01; /* Eを1にする */
$0177	$1405			BSF	PORTA, 0
;sd1602_4bit_mode.h,17 :: 		Delay_us(1);  /* 1us（230ns以上）の時間待ち */
$0178	$3001			MOVLW	1
$0179	$00CA			MOVWF	STACK_10
$017A	$0BCA			DECFSZ	STACK_10, F
$017B	$297A			GOTO	$-1
$017C	$0000			NOP
;sd1602_4bit_mode.h,18 :: 		PORTA &= 0xFE; /* Eを0にする */
$017D	$30FE			MOVLW	254
$017E	$0585			ANDWF	PORTA, 1
;sd1602_4bit_mode.h,19 :: 		}
$017F	$0008			RETURN
$01B3	$	_SD1602_control:
;sd1602_4bit_mode.h,28 :: 		void SD1602_control(char c)
;sd1602_4bit_mode.h,30 :: 		SD1602_write(c, 0); /* 制御コードの上位4bitを渡す */
$01B3	$1303			BCF	STATUS, RP1
$01B4	$1283			BCF	STATUS, RP0
$01B5	$0833			MOVF	FARG_SD1602_control+0, 0
$01B6	$00B4			MOVWF	FARG_SD1602_write+0
$01B7	$01B5			CLRF	FARG_SD1602_write+1, 1
$01B8	$2163			CALL	_SD1602_write
;sd1602_4bit_mode.h,31 :: 		SD1602_write(c << 4, 0); /* 制御コードの下位4bitを渡す */
$01B9	$0833			MOVF	FARG_SD1602_control+0, 0
$01BA	$00B4			MOVWF	FARG_SD1602_write+0
$01BB	$0DB4			RLF	FARG_SD1602_write+0, 1
$01BC	$1034			BCF	FARG_SD1602_write+0, 0
$01BD	$0DB4			RLF	FARG_SD1602_write+0, 1
$01BE	$1034			BCF	FARG_SD1602_write+0, 0
$01BF	$0DB4			RLF	FARG_SD1602_write+0, 1
$01C0	$1034			BCF	FARG_SD1602_write+0, 0
$01C1	$0DB4			RLF	FARG_SD1602_write+0, 1
$01C2	$1034			BCF	FARG_SD1602_write+0, 0
$01C3	$01B5			CLRF	FARG_SD1602_write+1, 1
$01C4	$2163			CALL	_SD1602_write
;sd1602_4bit_mode.h,32 :: 		Delay_us(50); /* 50us（40us以上）の時間待ち */
$01C5	$3053			MOVLW	83
$01C6	$00CA			MOVWF	STACK_10
$01C7	$0BCA			DECFSZ	STACK_10, F
$01C8	$29C7			GOTO	$-1
;sd1602_4bit_mode.h,33 :: 		}
$01C9	$0008			RETURN
$01E8	$	_____DoICP:
$01E8	$1303			BCF	STATUS, RP1
$01E9	$1283			BCF	STATUS, RP0
$01EA	$080D			MOVF	___DoICPHiAddr, 0
$01EB	$008A			MOVWF	PCLATH
$01EC	$080E			MOVF	___DoICPLoAddr, 0
$01ED	$0082			MOVWF	PCL
$01EE	$0008			RETURN
$019A	$	_SD1602_display:
;sd1602_4bit_mode.h,21 :: 		void SD1602_display(char c)
;sd1602_4bit_mode.h,23 :: 		SD1602_write(c, 1); /* 文字コードの上位4bitを渡す */
$019A	$1303			BCF	STATUS, RP1
$019B	$1283			BCF	STATUS, RP0
$019C	$0833			MOVF	FARG_SD1602_display+0, 0
$019D	$00B4			MOVWF	FARG_SD1602_write+0
$019E	$3001			MOVLW	1
$019F	$00B5			MOVWF	FARG_SD1602_write+1
$01A0	$2163			CALL	_SD1602_write
;sd1602_4bit_mode.h,24 :: 		SD1602_write(c << 4, 1); /* 文字コードの下位4bitを渡す */
$01A1	$0833			MOVF	FARG_SD1602_display+0, 0
$01A2	$00B4			MOVWF	FARG_SD1602_write+0
$01A3	$0DB4			RLF	FARG_SD1602_write+0, 1
$01A4	$1034			BCF	FARG_SD1602_write+0, 0
$01A5	$0DB4			RLF	FARG_SD1602_write+0, 1
$01A6	$1034			BCF	FARG_SD1602_write+0, 0
$01A7	$0DB4			RLF	FARG_SD1602_write+0, 1
$01A8	$1034			BCF	FARG_SD1602_write+0, 0
$01A9	$0DB4			RLF	FARG_SD1602_write+0, 1
$01AA	$1034			BCF	FARG_SD1602_write+0, 0
$01AB	$3001			MOVLW	1
$01AC	$00B5			MOVWF	FARG_SD1602_write+1
$01AD	$2163			CALL	_SD1602_write
;sd1602_4bit_mode.h,25 :: 		Delay_us(50); /* 50us（40us以上）の時間待ち */
$01AE	$3053			MOVLW	83
$01AF	$00CA			MOVWF	STACK_10
$01B0	$0BCA			DECFSZ	STACK_10, F
$01B1	$29B0			GOTO	$-1
;sd1602_4bit_mode.h,26 :: 		}
$01B2	$0008			RETURN
$0067	$	_SD1602_init:
;sd1602_4bit_mode.h,42 :: 		void SD1602_init(void)
;sd1602_4bit_mode.h,44 :: 		Delay_ms(20); /* 20ms（15ms以上）の時間待ち */
$0067	$3082			MOVLW	130
$0068	$1303			BCF	STATUS, RP1
$0069	$1283			BCF	STATUS, RP0
$006A	$00CB			MOVWF	STACK_11
$006B	$30FF			MOVLW	255
$006C	$00CA			MOVWF	STACK_10
$006D	$0BCB			DECFSZ	STACK_11, F
$006E	$2870			GOTO	$+2
$006F	$2873			GOTO	$+4
$0070	$0BCA			DECFSZ	STACK_10, F
$0071	$2870			GOTO	$-1
$0072	$286D			GOTO	$-5
$0073	$3087			MOVLW	135
$0074	$00CA			MOVWF	STACK_10
$0075	$0BCA			DECFSZ	STACK_10, F
$0076	$2875			GOTO	$-1
$0077	$0000			NOP
;sd1602_4bit_mode.h,45 :: 		SD1602_write(0x30, 0); /* 8bitモード設定 */
$0078	$3030			MOVLW	48
$0079	$00B4			MOVWF	FARG_SD1602_write+0
$007A	$01B5			CLRF	FARG_SD1602_write+1, 1
$007B	$2163			CALL	_SD1602_write
;sd1602_4bit_mode.h,46 :: 		Delay_ms(5); /* 5ms（4.1ms以上）の時間待ち */
$007C	$3021			MOVLW	33
$007D	$00CB			MOVWF	STACK_11
$007E	$30FF			MOVLW	255
$007F	$00CA			MOVWF	STACK_10
$0080	$0BCB			DECFSZ	STACK_11, F
$0081	$2883			GOTO	$+2
$0082	$2886			GOTO	$+4
$0083	$0BCA			DECFSZ	STACK_10, F
$0084	$2883			GOTO	$-1
$0085	$2880			GOTO	$-5
$0086	$3060			MOVLW	96
$0087	$00CA			MOVWF	STACK_10
$0088	$0BCA			DECFSZ	STACK_10, F
$0089	$2888			GOTO	$-1
$008A	$0000			NOP
$008B	$0000			NOP
;sd1602_4bit_mode.h,47 :: 		SD1602_write(0x30, 0); /* 8bitモード設定 */
$008C	$3030			MOVLW	48
$008D	$00B4			MOVWF	FARG_SD1602_write+0
$008E	$01B5			CLRF	FARG_SD1602_write+1, 1
$008F	$2163			CALL	_SD1602_write
;sd1602_4bit_mode.h,48 :: 		Delay_ms(5); /* 5ms（100us以上）の時間待ち */
$0090	$3021			MOVLW	33
$0091	$00CB			MOVWF	STACK_11
$0092	$30FF			MOVLW	255
$0093	$00CA			MOVWF	STACK_10
$0094	$0BCB			DECFSZ	STACK_11, F
$0095	$2897			GOTO	$+2
$0096	$289A			GOTO	$+4
$0097	$0BCA			DECFSZ	STACK_10, F
$0098	$2897			GOTO	$-1
$0099	$2894			GOTO	$-5
$009A	$3060			MOVLW	96
$009B	$00CA			MOVWF	STACK_10
$009C	$0BCA			DECFSZ	STACK_10, F
$009D	$289C			GOTO	$-1
$009E	$0000			NOP
$009F	$0000			NOP
;sd1602_4bit_mode.h,49 :: 		SD1602_write(0x30, 0); /* 8bitモード設定 */
$00A0	$3030			MOVLW	48
$00A1	$00B4			MOVWF	FARG_SD1602_write+0
$00A2	$01B5			CLRF	FARG_SD1602_write+1, 1
$00A3	$2163			CALL	_SD1602_write
;sd1602_4bit_mode.h,50 :: 		Delay_ms(5); /* 5ms（4.1ms以上）の時間待ち */
$00A4	$3021			MOVLW	33
$00A5	$00CB			MOVWF	STACK_11
$00A6	$30FF			MOVLW	255
$00A7	$00CA			MOVWF	STACK_10
$00A8	$0BCB			DECFSZ	STACK_11, F
$00A9	$28AB			GOTO	$+2
$00AA	$28AE			GOTO	$+4
$00AB	$0BCA			DECFSZ	STACK_10, F
$00AC	$28AB			GOTO	$-1
$00AD	$28A8			GOTO	$-5
$00AE	$3060			MOVLW	96
$00AF	$00CA			MOVWF	STACK_10
$00B0	$0BCA			DECFSZ	STACK_10, F
$00B1	$28B0			GOTO	$-1
$00B2	$0000			NOP
$00B3	$0000			NOP
;sd1602_4bit_mode.h,51 :: 		SD1602_write(0x20, 0); /* 4bitモード設定 */
$00B4	$3020			MOVLW	32
$00B5	$00B4			MOVWF	FARG_SD1602_write+0
$00B6	$01B5			CLRF	FARG_SD1602_write+1, 1
$00B7	$2163			CALL	_SD1602_write
;sd1602_4bit_mode.h,52 :: 		Delay_ms(5); /* 5ms（40us以上）の時間待ち */
$00B8	$3021			MOVLW	33
$00B9	$00CB			MOVWF	STACK_11
$00BA	$30FF			MOVLW	255
$00BB	$00CA			MOVWF	STACK_10
$00BC	$0BCB			DECFSZ	STACK_11, F
$00BD	$28BF			GOTO	$+2
$00BE	$28C2			GOTO	$+4
$00BF	$0BCA			DECFSZ	STACK_10, F
$00C0	$28BF			GOTO	$-1
$00C1	$28BC			GOTO	$-5
$00C2	$3060			MOVLW	96
$00C3	$00CA			MOVWF	STACK_10
$00C4	$0BCA			DECFSZ	STACK_10, F
$00C5	$28C4			GOTO	$-1
$00C6	$0000			NOP
$00C7	$0000			NOP
;sd1602_4bit_mode.h,53 :: 		SD1602_control(0x28); /* 4bitモードで2行表示に設定する */
$00C8	$3028			MOVLW	40
$00C9	$00B3			MOVWF	FARG_SD1602_control+0
$00CA	$21B3			CALL	_SD1602_control
;sd1602_4bit_mode.h,54 :: 		SD1602_control(0x08); /* テキスト表示をオフにする */
$00CB	$3008			MOVLW	8
$00CC	$00B3			MOVWF	FARG_SD1602_control+0
$00CD	$21B3			CALL	_SD1602_control
;sd1602_4bit_mode.h,55 :: 		SD1602_control(0x0C); /* テキスト表示をオンにする */
$00CE	$300C			MOVLW	12
$00CF	$00B3			MOVWF	FARG_SD1602_control+0
$00D0	$21B3			CALL	_SD1602_control
;sd1602_4bit_mode.h,56 :: 		SD1602_control(0x06); /* カーソル移動を右方向に設定する */
$00D1	$3006			MOVLW	6
$00D2	$00B3			MOVWF	FARG_SD1602_control+0
$00D3	$21B3			CALL	_SD1602_control
;sd1602_4bit_mode.h,57 :: 		}
$00D4	$0008			RETURN
$0180	$	_SD1602_clear:
;sd1602_4bit_mode.h,35 :: 		void SD1602_clear(void)
;sd1602_4bit_mode.h,37 :: 		SD1602_write(0x01, 0); /* 制御コードの上位4bitを渡す */
$0180	$3001			MOVLW	1
$0181	$1303			BCF	STATUS, RP1
$0182	$1283			BCF	STATUS, RP0
$0183	$00B4			MOVWF	FARG_SD1602_write+0
$0184	$01B5			CLRF	FARG_SD1602_write+1, 1
$0185	$2163			CALL	_SD1602_write
;sd1602_4bit_mode.h,38 :: 		SD1602_write(0x01 << 4, 0); /* 制御コードの下位4bitを渡す */
$0186	$3010			MOVLW	16
$0187	$00B4			MOVWF	FARG_SD1602_write+0
$0188	$01B5			CLRF	FARG_SD1602_write+1, 1
$0189	$2163			CALL	_SD1602_write
;sd1602_4bit_mode.h,39 :: 		Delay_ms(2); /* 2ms（1.64ms以上）の時間待ち */
$018A	$300D			MOVLW	13
$018B	$00CB			MOVWF	STACK_11
$018C	$30FF			MOVLW	255
$018D	$00CA			MOVWF	STACK_10
$018E	$0BCB			DECFSZ	STACK_11, F
$018F	$2991			GOTO	$+2
$0190	$2994			GOTO	$+4
$0191	$0BCA			DECFSZ	STACK_10, F
$0192	$2991			GOTO	$-1
$0193	$298E			GOTO	$-5
$0194	$30F3			MOVLW	243
$0195	$00CA			MOVWF	STACK_10
$0196	$0BCA			DECFSZ	STACK_10, F
$0197	$2996			GOTO	$-1
$0198	$0000			NOP
;sd1602_4bit_mode.h,40 :: 		}
$0199	$0008			RETURN
$013D	$	_strConstCpy:
;utils.h,3 :: 		(char *dest, const char *source)
;utils.h,5 :: 		while(*source)
$013D	$	L_strConstCpy_4:
$013D	$1303			BCF	STATUS, RP1
$013E	$1283			BCF	STATUS, RP0
$013F	$0831			MOVF	FARG_strConstCpy+1, 0
$0140	$008E			MOVWF	___DoICPLoAddr
$0141	$0832			MOVF	FARG_strConstCpy+2, 0
$0142	$008D			MOVWF	___DoICPHiAddr
$0143	$080A			MOVF	PCLATH, 0
$0144	$008C			MOVWF	___DoICPSavePCLATH
$0145	$21E8			CALL	_____DoICP
$0146	$00C0			MOVWF	STACK_0
$0147	$080C			MOVF	___DoICPSavePCLATH, 0
$0148	$008A			MOVWF	PCLATH
$0149	$0840			MOVF	STACK_0, 0
$014A	$1903			BTFSC	STATUS, Z
$014B	$295F			GOTO	L_strConstCpy_5
;utils.h,6 :: 		*dest++ = *source++ ;
$014C	$0831			MOVF	FARG_strConstCpy+1, 0
$014D	$008E			MOVWF	___DoICPLoAddr
$014E	$0832			MOVF	FARG_strConstCpy+2, 0
$014F	$008D			MOVWF	___DoICPHiAddr
$0150	$080A			MOVF	PCLATH, 0
$0151	$008C			MOVWF	___DoICPSavePCLATH
$0152	$21E8			CALL	_____DoICP
$0153	$00C0			MOVWF	STACK_0
$0154	$080C			MOVF	___DoICPSavePCLATH, 0
$0155	$008A			MOVWF	PCLATH
$0156	$0830			MOVF	FARG_strConstCpy+0, 0
$0157	$0084			MOVWF	FSR
$0158	$0840			MOVF	STACK_0, 0
$0159	$0080			MOVWF	INDF
$015A	$0AB0			INCF	FARG_strConstCpy+0, 1
$015B	$0AB1			INCF	FARG_strConstCpy+1, 1
$015C	$1903			BTFSC	STATUS, Z
$015D	$0AB2			INCF	FARG_strConstCpy+2, 1
$015E	$293D			GOTO	L_strConstCpy_4
$015F	$	L_strConstCpy_5:
;utils.h,8 :: 		*dest = 0 ;
$015F	$0830			MOVF	FARG_strConstCpy+0, 0
$0160	$0084			MOVWF	FSR
$0161	$0180			CLRF	INDF, 1
;utils.h,9 :: 		}
$0162	$0008			RETURN
$01DC	$	table___s2:
;D_82_16F84A_SD1602_v_4_1.c,6 :: 		const char s2[]  = "ad nauseam";
$01DC	$3461			RETLW	97
$01DD	$3464			RETLW	100
$01DE	$3420			RETLW	32
$01DF	$346E			RETLW	110
$01E0	$3461			RETLW	97
$01E1	$3475			RETLW	117
$01E2	$3473			RETLW	115
$01E3	$3465			RETLW	101
$01E4	$3461			RETLW	97
$01E5	$346D			RETLW	109
$01E6	$3400			RETLW	0
$01E7	$0008			RETURN
$01CA	$	_SD1602_print:
;sd1602_4bit_mode.h,59 :: 		void SD1602_print(char *s)
;sd1602_4bit_mode.h,61 :: 		while (*s != 0x00) /* ナル文字（0x00）があらわれるまで */
$01CA	$	L_SD1602_print_2:
$01CA	$1303			BCF	STATUS, RP1
$01CB	$1283			BCF	STATUS, RP0
$01CC	$0830			MOVF	FARG_SD1602_print+0, 0
$01CD	$0084			MOVWF	FSR
$01CE	$0800			MOVF	INDF, 0
$01CF	$00C1			MOVWF	STACK_1
$01D0	$0841			MOVF	STACK_1, 0
$01D1	$3A00			XORLW	0
$01D2	$1903			BTFSC	STATUS, Z
$01D3	$29DB			GOTO	L_SD1602_print_3
;sd1602_4bit_mode.h,63 :: 		SD1602_display(*s); /* テキストデータを表示する */
$01D4	$0830			MOVF	FARG_SD1602_print+0, 0
$01D5	$0084			MOVWF	FSR
$01D6	$0800			MOVF	INDF, 0
$01D7	$00B3			MOVWF	FARG_SD1602_display+0
$01D8	$219A			CALL	_SD1602_display
;sd1602_4bit_mode.h,64 :: 		s++;
$01D9	$0AB0			INCF	FARG_SD1602_print+0, 1
;sd1602_4bit_mode.h,65 :: 		}
$01DA	$29CA			GOTO	L_SD1602_print_2
$01DB	$	L_SD1602_print_3:
;sd1602_4bit_mode.h,66 :: 		}
$01DB	$0008			RETURN
$00D5	$	_main:
;D_82_16F84A_SD1602_v_4_1.c,38 :: 		void main(void)
;D_82_16F84A_SD1602_v_4_1.c,45 :: 		TRISA     = 0x00;
$00D5	$1303			BCF	STATUS, RP1
$00D6	$1683			BSF	STATUS, RP0
$00D7	$0185			CLRF	TRISA, 1
;D_82_16F84A_SD1602_v_4_1.c,46 :: 		PORTA     = 0x00;
$00D8	$1283			BCF	STATUS, RP0
$00D9	$0185			CLRF	PORTA, 1
;D_82_16F84A_SD1602_v_4_1.c,47 :: 		TRISB     = 0x00;
$00DA	$1683			BSF	STATUS, RP0
$00DB	$0186			CLRF	TRISB, 1
;D_82_16F84A_SD1602_v_4_1.c,49 :: 		PORTB     = 0x80;  // 1000 0000
$00DC	$3080			MOVLW	128
$00DD	$1283			BCF	STATUS, RP0
$00DE	$0086			MOVWF	PORTB
;D_82_16F84A_SD1602_v_4_1.c,51 :: 		OPTION_REG &= 0x7F;
$00DF	$307F			MOVLW	127
$00E0	$1683			BSF	STATUS, RP0
$00E1	$0501			ANDWF	OPTION_REG, 0
$00E2	$00C0			MOVWF	STACK_0
$00E3	$0840			MOVF	STACK_0, 0
$00E4	$0081			MOVWF	OPTION_REG
;D_82_16F84A_SD1602_v_4_1.c,52 :: 		OPTION_REG &= 0xBF;
$00E5	$30BF			MOVLW	191
$00E6	$0540			ANDWF	STACK_0, 0
$00E7	$0081			MOVWF	OPTION_REG
;D_82_16F84A_SD1602_v_4_1.c,54 :: 		INTCON         |= 0x10;
$00E8	$160B			BSF	INTCON, 4
;D_82_16F84A_SD1602_v_4_1.c,55 :: 		INTCON         |= 0x80;
$00E9	$178B			BSF	INTCON, 7
;D_82_16F84A_SD1602_v_4_1.c,58 :: 		SD1602_init();
$00EA	$2067			CALL	_SD1602_init
;D_82_16F84A_SD1602_v_4_1.c,60 :: 		SD1602_clear();
$00EB	$2180			CALL	_SD1602_clear
;D_82_16F84A_SD1602_v_4_1.c,64 :: 		while(1)
$00EC	$	L_main_7:
;D_82_16F84A_SD1602_v_4_1.c,67 :: 		strConstCpy(s, s2);
$00EC	$300F			MOVLW	_s
$00ED	$00B0			MOVWF	FARG_strConstCpy+0
$00EE	$30DC			MOVLW	#_s2
$00EF	$00B1			MOVWF	FARG_strConstCpy+1
$00F0	$3001			MOVLW	@#_s2
$00F1	$00B2			MOVWF	FARG_strConstCpy+2
$00F2	$213D			CALL	_strConstCpy
;D_82_16F84A_SD1602_v_4_1.c,70 :: 		SD1602_control(0x80);
$00F3	$3080			MOVLW	128
$00F4	$00B3			MOVWF	FARG_SD1602_control+0
$00F5	$21B3			CALL	_SD1602_control
;D_82_16F84A_SD1602_v_4_1.c,71 :: 		SD1602_print(s);
$00F6	$300F			MOVLW	_s
$00F7	$00B0			MOVWF	FARG_SD1602_print+0
$00F8	$21CA			CALL	_SD1602_print
;D_82_16F84A_SD1602_v_4_1.c,73 :: 		Delay_ms(1000);
$00F9	$301A			MOVLW	26
$00FA	$00CC			MOVWF	STACK_12
$00FB	$30FF			MOVLW	255
$00FC	$00CB			MOVWF	STACK_11
$00FD	$30FF			MOVLW	255
$00FE	$00CA			MOVWF	STACK_10
$00FF	$0BCC			DECFSZ	STACK_12, F
$0100	$2902			GOTO	$+2
$0101	$2909			GOTO	$+8
$0102	$0BCB			DECFSZ	STACK_11, F
$0103	$2905			GOTO	$+2
$0104	$2908			GOTO	$+4
$0105	$0BCA			DECFSZ	STACK_10, F
$0106	$2905			GOTO	$-1
$0107	$2902			GOTO	$-5
$0108	$28FF			GOTO	$-9
$0109	$307F			MOVLW	127
$010A	$00CB			MOVWF	STACK_11
$010B	$30FF			MOVLW	255
$010C	$00CA			MOVWF	STACK_10
$010D	$0BCB			DECFSZ	STACK_11, F
$010E	$2910			GOTO	$+2
$010F	$2913			GOTO	$+4
$0110	$0BCA			DECFSZ	STACK_10, F
$0111	$2910			GOTO	$-1
$0112	$290D			GOTO	$-5
$0113	$3058			MOVLW	88
$0114	$00CA			MOVWF	STACK_10
$0115	$0BCA			DECFSZ	STACK_10, F
$0116	$2915			GOTO	$-1
$0117	$0000			NOP
$0118	$0000			NOP
;D_82_16F84A_SD1602_v_4_1.c,75 :: 		SD1602_clear();
$0119	$2180			CALL	_SD1602_clear
;D_82_16F84A_SD1602_v_4_1.c,77 :: 		Delay_ms(500);
$011A	$300D			MOVLW	13
$011B	$00CC			MOVWF	STACK_12
$011C	$30FF			MOVLW	255
$011D	$00CB			MOVWF	STACK_11
$011E	$30FF			MOVLW	255
$011F	$00CA			MOVWF	STACK_10
$0120	$0BCC			DECFSZ	STACK_12, F
$0121	$2923			GOTO	$+2
$0122	$292A			GOTO	$+8
$0123	$0BCB			DECFSZ	STACK_11, F
$0124	$2926			GOTO	$+2
$0125	$2929			GOTO	$+4
$0126	$0BCA			DECFSZ	STACK_10, F
$0127	$2926			GOTO	$-1
$0128	$2923			GOTO	$-5
$0129	$2920			GOTO	$-9
$012A	$30BF			MOVLW	191
$012B	$00CB			MOVWF	STACK_11
$012C	$30FF			MOVLW	255
$012D	$00CA			MOVWF	STACK_10
$012E	$0BCB			DECFSZ	STACK_11, F
$012F	$2931			GOTO	$+2
$0130	$2934			GOTO	$+4
$0131	$0BCA			DECFSZ	STACK_10, F
$0132	$2931			GOTO	$-1
$0133	$292E			GOTO	$-5
$0134	$302B			MOVLW	43
$0135	$00CA			MOVWF	STACK_10
$0136	$0BCA			DECFSZ	STACK_10, F
$0137	$2936			GOTO	$-1
$0138	$0000			NOP
$0139	$0000			NOP
$013A	$0000			NOP
;D_82_16F84A_SD1602_v_4_1.c,94 :: 		}//while(1)
$013B	$28EC			GOTO	L_main_7
;D_82_16F84A_SD1602_v_4_1.c,96 :: 		}
$013C	$293C			GOTO	$
