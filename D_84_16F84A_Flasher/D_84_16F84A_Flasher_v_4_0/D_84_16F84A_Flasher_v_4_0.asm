;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 2014/03/23 17:22:45
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$288A			GOTO	_main
$0004	$	_interrupt:
$0004	$00CF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$0094			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$0093			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$0095			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0840			MOVF	STACK_0, 0
$000E	$009A			MOVWF	STSAVED_0
;D_84_16F84A_Flasher_v_4_0.c,4 :: 		void interrupt(void)
;D_84_16F84A_Flasher_v_4_0.c,6 :: 		INTCON         &= 0x7F;
$000F	$307F			MOVLW	127
$0010	$058B			ANDWF	INTCON, 1
;D_84_16F84A_Flasher_v_4_0.c,7 :: 		INTCON         &= 0xDF;
$0011	$30DF			MOVLW	223
$0012	$058B			ANDWF	INTCON, 1
;D_84_16F84A_Flasher_v_4_0.c,8 :: 		INTCON         &= 0xFB;
$0013	$30FB			MOVLW	251
$0014	$058B			ANDWF	INTCON, 1
;D_84_16F84A_Flasher_v_4_0.c,10 :: 		if(count < duty)
$0015	$080D			MOVF	_duty, 0
$0016	$020C			SUBWF	_count, 0
$0017	$1803			BTFSC	STATUS, C
$0018	$281C			GOTO	L_interrupt_0
;D_84_16F84A_Flasher_v_4_0.c,12 :: 		PORTA = 0x01;
$0019	$3001			MOVLW	1
$001A	$0085			MOVWF	PORTA
;D_84_16F84A_Flasher_v_4_0.c,13 :: 		}
$001B	$281D			GOTO	L_interrupt_1
$001C	$	L_interrupt_0:
;D_84_16F84A_Flasher_v_4_0.c,16 :: 		PORTA = 0x00;
$001C	$0185			CLRF	PORTA, 1
;D_84_16F84A_Flasher_v_4_0.c,17 :: 		}
$001D	$	L_interrupt_1:
;D_84_16F84A_Flasher_v_4_0.c,19 :: 		count++;
$001D	$0A8C			INCF	_count, 1
;D_84_16F84A_Flasher_v_4_0.c,21 :: 		if(count == 100)
$001E	$080C			MOVF	_count, 0
$001F	$3A64			XORLW	100
$0020	$1D03			BTFSS	STATUS, Z
$0021	$2823			GOTO	L_interrupt_2
;D_84_16F84A_Flasher_v_4_0.c,23 :: 		count = 0;
$0022	$018C			CLRF	_count, 1
;D_84_16F84A_Flasher_v_4_0.c,24 :: 		}
$0023	$	L_interrupt_2:
;D_84_16F84A_Flasher_v_4_0.c,26 :: 		INTCON         |= 0x20;
$0023	$168B			BSF	INTCON, 5
;D_84_16F84A_Flasher_v_4_0.c,27 :: 		INTCON         |= 0x80;
$0024	$178B			BSF	INTCON, 7
;D_84_16F84A_Flasher_v_4_0.c,29 :: 		}//void interrupt(void)
$0025	$	L_Interrupt_end:
$0025	$081A			MOVF	STSAVED_0, 0
$0026	$00C0			MOVWF	STACK_0
$0027	$0815			MOVF	?savePCLATH, 0
$0028	$008A			MOVWF	PCLATH
$0029	$0813			MOVF	?saveFSR, 0
$002A	$0084			MOVWF	FSR
$002B	$0E14			SWAPF	?saveSTATUS, 0
$002C	$0083			MOVWF	STATUS
$002D	$0ECF			SWAPF	STACK_15, 1
$002E	$0E4F			SWAPF	STACK_15, 0
$002F	$0009			RETFIE
$015F	$	_Mul_32x32_U:
$015F	$1303			BCF	STATUS, RP1
$0160	$1283			BCF	STATUS, RP0
$0161	$3022			MOVLW	34
$0162	$00CC			MOVWF	STACK_12
$0163	$01C8			CLRF	STACK_8
$0164	$01C9			CLRF	STACK_9
$0165	$01CA			CLRF	STACK_10
$0166	$01CB			CLRF	STACK_11
$0167	$	_NEXT:
$0167	$03CC			DECF	STACK_12, F
$0168	$1903			BTFSC	STATUS, Z
$0169	$2995			GOTO	_EXIT2
$016A	$1003			BCF	STATUS, C
$016B	$	_LOOP:
$016B	$0CCB			RRF	STACK_11, F
$016C	$0CCA			RRF	STACK_10, F
$016D	$0CC9			RRF	STACK_9, F
$016E	$0CC8			RRF	STACK_8, F
$016F	$0CC3			RRF	STACK_3, F
$0170	$0CC2			RRF	STACK_2, F
$0171	$0CC1			RRF	STACK_1, F
$0172	$0CC0			RRF	STACK_0, F
$0173	$1C03			BTFSS	STATUS, C
$0174	$2967			GOTO	_NEXT
$0175	$03CC			DECF	STACK_12, F
$0176	$1903			BTFSC	STATUS, Z
$0177	$2987			GOTO	_EXIT1
$0178	$0844			MOVF	STACK_4, W
$0179	$07C8			ADDWF	STACK_8, F
$017A	$0845			MOVF	STACK_5, W
$017B	$1803			BTFSC	STATUS, C
$017C	$0F45			INCFSZ	STACK_5, W
$017D	$07C9			ADDWF	STACK_9, F
$017E	$0846			MOVF	STACK_6, W
$017F	$1803			BTFSC	STATUS, C
$0180	$0F46			INCFSZ	STACK_6, W
$0181	$07CA			ADDWF	STACK_10, F
$0182	$0847			MOVF	STACK_7, W
$0183	$1803			BTFSC	STATUS, C
$0184	$0F47			INCFSZ	STACK_7, W
$0185	$07CB			ADDWF	STACK_11, F
$0186	$296B			GOTO	_LOOP
$0187	$	_EXIT1:
$0187	$0844			MOVF	STACK_4, W
$0188	$07C8			ADDWF	STACK_8, F
$0189	$0845			MOVF	STACK_5, W
$018A	$1803			BTFSC	STATUS, C
$018B	$0F45			INCFSZ	STACK_5, W
$018C	$07C9			ADDWF	STACK_9, F
$018D	$0846			MOVF	STACK_6, W
$018E	$1803			BTFSC	STATUS, C
$018F	$0F46			INCFSZ	STACK_6, W
$0190	$07CA			ADDWF	STACK_10, F
$0191	$0847			MOVF	STACK_7, W
$0192	$1803			BTFSC	STATUS, C
$0193	$0F47			INCFSZ	STACK_7, W
$0194	$07CB			ADDWF	STACK_11, F
$0195	$	_EXIT2:
$0195	$0008			RETURN
$01C4	$	_srand:
$01C4	$1303			BCF	STATUS, RP1
$01C5	$1283			BCF	STATUS, RP0
$01C6	$0818			MOVF	FARG_srand+0, 0
$01C7	$008E			MOVWF	c_stdlib_randx
$01C8	$0819			MOVF	FARG_srand+1, 0
$01C9	$008F			MOVWF	c_stdlib_randx+1
$01CA	$0190			CLRF	c_stdlib_randx+2
$01CB	$0191			CLRF	c_stdlib_randx+3
$01CC	$3001			MOVLW	1
$01CD	$0092			MOVWF	c_stdlib_randf
$01CE	$0008			RETURN
$0124	$	_Mul_32x32_S:
$0124	$1303			BCF	STATUS, RP1
$0125	$1283			BCF	STATUS, RP0
$0126	$01CD			CLRF	STACK_13
$0127	$	_IF_FIRST:
$0127	$1FC3			BTFSS	STACK_3, 7
$0128	$2936			GOTO	_IF_SECOND
$0129	$	_INVERCE_FIRST:
$0129	$09C0			COMF	STACK_0, F
$012A	$09C1			COMF	STACK_1, F
$012B	$09C2			COMF	STACK_2, F
$012C	$09C3			COMF	STACK_3, F
$012D	$0AC0			INCF	STACK_0, F
$012E	$1903			BTFSC	STATUS, Z
$012F	$0AC1			INCF	STACK_1, F
$0130	$1903			BTFSC	STATUS, Z
$0131	$0AC2			INCF	STACK_2, F
$0132	$1903			BTFSC	STATUS, Z
$0133	$0AC3			INCF	STACK_3, F
$0134	$3081			MOVLW	129
$0135	$07CD			ADDWF	STACK_13, F
$0136	$	_IF_SECOND:
$0136	$1FC7			BTFSS	STACK_7, 7
$0137	$2944			GOTO	_MULT
$0138	$	_INBERSE_SECOND:
$0138	$09C4			COMF	STACK_4, F
$0139	$09C5			COMF	STACK_5, F
$013A	$09C6			COMF	STACK_6, F
$013B	$09C7			COMF	STACK_7, F
$013C	$0AC4			INCF	STACK_4, F
$013D	$1903			BTFSC	STATUS, Z
$013E	$0AC5			INCF	STACK_5, F
$013F	$1903			BTFSC	STATUS, Z
$0140	$0AC6			INCF	STACK_6, F
$0141	$1903			BTFSC	STATUS, Z
$0142	$0AC7			INCF	STACK_7, F
$0143	$0ACD			INCF	STACK_13, F
$0144	$	_MULT:
$0144	$215F			CALL	_Mul_32x32_U
$0145	$1C4D			BTFSS	STACK_13, 0
$0146	$295E			GOTO	_EXIT
$0147	$09C0			COMF	STACK_0, F
$0148	$09C1			COMF	STACK_1, F
$0149	$09C2			COMF	STACK_2, F
$014A	$09C3			COMF	STACK_3, F
$014B	$09C8			COMF	STACK_8, F
$014C	$09C9			COMF	STACK_9, F
$014D	$09CA			COMF	STACK_10, F
$014E	$09CB			COMF	STACK_11, F
$014F	$0AC0			INCF	STACK_0, F
$0150	$1903			BTFSC	STATUS, Z
$0151	$0AC1			INCF	STACK_1, F
$0152	$1903			BTFSC	STATUS, Z
$0153	$0AC2			INCF	STACK_2, F
$0154	$1903			BTFSC	STATUS, Z
$0155	$0AC3			INCF	STACK_3, F
$0156	$1903			BTFSC	STATUS, Z
$0157	$0AC8			INCF	STACK_8, F
$0158	$1903			BTFSC	STATUS, Z
$0159	$0AC9			INCF	STACK_9, F
$015A	$1903			BTFSC	STATUS, Z
$015B	$0ACA			INCF	STACK_10, F
$015C	$1903			BTFSC	STATUS, Z
$015D	$0ACB			INCF	STACK_11, F
$015E	$	_EXIT:
$015E	$0008			RETURN
$0196	$	_Div_16x16_S_L:
$0196	$1303			BCF	STATUS, RP1
$0197	$1283			BCF	STATUS, RP0
$0198	$0D41			RLF	STACK_1, W
$0199	$0DC8			RLF	STACK_8, F
$019A	$0DC9			RLF	STACK_9, F
$019B	$0844			MOVF	STACK_4, W
$019C	$02C8			SUBWF	STACK_8, F
$019D	$0845			MOVF	STACK_5, W
$019E	$1C03			BTFSS	STATUS, C
$019F	$0F45			INCFSZ	STACK_5, W
$01A0	$02C9			SUBWF	STACK_9, F
$01A1	$0DC0			RLF	STACK_0, F
$01A2	$0DC1			RLF	STACK_1, F
$01A3	$300F			MOVLW	15
$01A4	$00CC			MOVWF	STACK_12
$01A5	$0D41			RLF	STACK_1, W
$01A6	$0DC8			RLF	STACK_8, F
$01A7	$0DC9			RLF	STACK_9, F
$01A8	$0844			MOVF	STACK_4, W
$01A9	$1C40			BTFSS	STACK_0, 0
$01AA	$29B1			GOTO	$+7
$01AB	$02C8			SUBWF	STACK_8, F
$01AC	$0845			MOVF	STACK_5, W
$01AD	$1C03			BTFSS	STATUS, C
$01AE	$0F45			INCFSZ	STACK_5, W
$01AF	$02C9			SUBWF	STACK_9, F
$01B0	$29B6			GOTO	$+6
$01B1	$07C8			ADDWF	STACK_8, F
$01B2	$0845			MOVF	STACK_5, W
$01B3	$1803			BTFSC	STATUS, C
$01B4	$0F45			INCFSZ	STACK_5, W
$01B5	$07C9			ADDWF	STACK_9, F
$01B6	$0DC0			RLF	STACK_0, F
$01B7	$0DC1			RLF	STACK_1, F
$01B8	$0BCC			DECFSZ	STACK_12, F
$01B9	$29A5			GOTO	$-20
$01BA	$1840			BTFSC	STACK_0, 0
$01BB	$29C2			GOTO	$+7
$01BC	$0844			MOVF	STACK_4, W
$01BD	$07C8			ADDWF	STACK_8, F
$01BE	$0845			MOVF	STACK_5, W
$01BF	$1803			BTFSC	STATUS, C
$01C0	$0F45			INCFSZ	STACK_5, W
$01C1	$07C9			ADDWF	STACK_9, F
$01C2	$0000			NOP
$01C3	$0008			RETURN
$00DD	$	_rand:
$00DD	$1303			BCF	STATUS, RP1
$00DE	$1283			BCF	STATUS, RP0
$00DF	$0812			MOVF	c_stdlib_randf, 0
$00E0	$1D03			BTFSS	STATUS, Z
$00E1	$28E7			GOTO	L_rand_75
$00E2	$3001			MOVLW	1
$00E3	$0098			MOVWF	FARG_srand+0
$00E4	$3000			MOVLW	0
$00E5	$0099			MOVWF	FARG_srand+1
$00E6	$21C4			CALL	_srand
$00E7	$	L_rand_75:
$00E7	$080E			MOVF	c_stdlib_randx, 0
$00E8	$00C0			MOVWF	STACK_0
$00E9	$080F			MOVF	c_stdlib_randx+1, 0
$00EA	$00C1			MOVWF	STACK_0+1
$00EB	$0810			MOVF	c_stdlib_randx+2, 0
$00EC	$00C2			MOVWF	STACK_0+2
$00ED	$0811			MOVF	c_stdlib_randx+3, 0
$00EE	$00C3			MOVWF	STACK_0+3
$00EF	$306D			MOVLW	109
$00F0	$00C4			MOVWF	STACK_4
$00F1	$304E			MOVLW	78
$00F2	$00C5			MOVWF	STACK_4+1
$00F3	$30C6			MOVLW	198
$00F4	$00C6			MOVWF	STACK_4+2
$00F5	$3041			MOVLW	65
$00F6	$00C7			MOVWF	STACK_4+3
$00F7	$2124			CALL	_mul_32x32_s
$00F8	$3039			MOVLW	57
$00F9	$00C5			MOVWF	STACK_5
$00FA	$3030			MOVLW	48
$00FB	$00C6			MOVWF	STACK_5+1
$00FC	$01C7			CLRF	STACK_5+2
$00FD	$01C8			CLRF	STACK_5+3
$00FE	$0840			MOVF	STACK_0, 0
$00FF	$07C5			ADDWF	STACK_5, 1
$0100	$0841			MOVF	STACK_0+1, 0
$0101	$1803			BTFSC	STATUS, C
$0102	$0F41			INCFSZ	STACK_0+1, 0
$0103	$07C6			ADDWF	STACK_5+1, 1
$0104	$0842			MOVF	STACK_0+2, 0
$0105	$1803			BTFSC	STATUS, C
$0106	$0F42			INCFSZ	STACK_0+2, 0
$0107	$07C7			ADDWF	STACK_5+2, 1
$0108	$0843			MOVF	STACK_0+3, 0
$0109	$1803			BTFSC	STATUS, C
$010A	$0F43			INCFSZ	STACK_0+3, 0
$010B	$07C8			ADDWF	STACK_5+3, 1
$010C	$0847			MOVF	STACK_5+2, 0
$010D	$00C0			MOVWF	STACK_0
$010E	$0848			MOVF	STACK_5+3, 0
$010F	$00C1			MOVWF	STACK_0+1
$0110	$3000			MOVLW	0
$0111	$1BC8			BTFSC	STACK_5+3, 7
$0112	$30FF			MOVLW	255
$0113	$00C3			MOVWF	STACK_0+3
$0114	$30FF			MOVLW	255
$0115	$05C0			ANDWF	STACK_0, 1
$0116	$307F			MOVLW	127
$0117	$05C1			ANDWF	STACK_0+1, 1
$0118	$3000			MOVLW	0
$0119	$05C2			ANDWF	STACK_0+2, 1
$011A	$05C3			ANDWF	STACK_0+3, 1
$011B	$0840			MOVF	STACK_0, 0
$011C	$008E			MOVWF	c_stdlib_randx
$011D	$0841			MOVF	STACK_0+1, 0
$011E	$008F			MOVWF	c_stdlib_randx+1
$011F	$0842			MOVF	STACK_0+2, 0
$0120	$0090			MOVWF	c_stdlib_randx+2
$0121	$0843			MOVF	STACK_0+3, 0
$0122	$0091			MOVWF	c_stdlib_randx+3
$0123	$0008			RETURN
$0030	$	_Div_16x16_S:
$0030	$1303			BCF	STATUS, RP1
$0031	$1283			BCF	STATUS, RP0
$0032	$01CD			CLRF	STACK_13
$0033	$01C9			CLRF	STACK_9
$0034	$01C8			CLRF	STACK_8
$0035	$0841			MOVF	STACK_1, W
$0036	$0440			IORWF	STACK_0, W
$0037	$1903			BTFSC	STATUS, Z
$0038	$3400			RETLW	0
$0039	$0841			MOVF	STACK_1, W
$003A	$0645			XORWF	STACK_5, W
$003B	$00CA			MOVWF	STACK_10
$003C	$1BCA			BTFSC	STACK_10, 7
$003D	$09CD			COMF	STACK_13, F
$003E	$01CB			CLRF	STACK_11
$003F	$1FC5			BTFSS	STACK_5, 7
$0040	$2846			GOTO	$+6
$0041	$09C4			COMF	STACK_4, F
$0042	$09C5			COMF	STACK_5, F
$0043	$0AC4			INCF	STACK_4, F
$0044	$1903			BTFSC	STATUS, Z
$0045	$0AC5			INCF	STACK_5, F
$0046	$1FC1			BTFSS	STACK_1, 7
$0047	$284D			GOTO	$+6
$0048	$09C0			COMF	STACK_0, F
$0049	$09C1			COMF	STACK_1, F
$004A	$0AC0			INCF	STACK_0, F
$004B	$1903			BTFSC	STATUS, Z
$004C	$0AC1			INCF	STACK_1, F
$004D	$0841			MOVF	STACK_1, W
$004E	$0445			IORWF	STACK_5, W
$004F	$00CA			MOVWF	STACK_10
$0050	$1BCA			BTFSC	STACK_10, 7
$0051	$2862			GOTO	$+17
$0052	$2196			CALL	_Div_16x16_S_L
$0053	$184B			BTFSC	STACK_11, 0
$0054	$2875			GOTO	$+33
$0055	$1FCD			BTFSS	STACK_13, 7
$0056	$3400			RETLW	0
$0057	$09C0			COMF	STACK_0, F
$0058	$09C1			COMF	STACK_1, F
$0059	$0AC0			INCF	STACK_0, F
$005A	$1903			BTFSC	STATUS, Z
$005B	$0AC1			INCF	STACK_1, F
$005C	$09C8			COMF	STACK_8, F
$005D	$09C9			COMF	STACK_9, F
$005E	$0AC8			INCF	STACK_8, F
$005F	$1903			BTFSC	STATUS, Z
$0060	$0AC9			INCF	STACK_9, F
$0061	$3400			RETLW	0
$0062	$1FC5			BTFSS	STACK_5, 7
$0063	$2871			GOTO	$+14
$0064	$1BC1			BTFSC	STACK_1, 7
$0065	$286D			GOTO	$+8
$0066	$0841			MOVF	STACK_1, W
$0067	$00C9			MOVWF	STACK_9
$0068	$0840			MOVF	STACK_0, W
$0069	$00C8			MOVWF	STACK_8
$006A	$01C1			CLRF	STACK_1
$006B	$01C0			CLRF	STACK_0
$006C	$2855			GOTO	$-23
$006D	$01C1			CLRF	STACK_1
$006E	$01C0			CLRF	STACK_0
$006F	$0AC0			INCF	STACK_0, F
$0070	$3400			RETLW	0
$0071	$09C1			COMF	STACK_1, F
$0072	$09C0			COMF	STACK_0, F
$0073	$0ACB			INCF	STACK_11, F
$0074	$2852			GOTO	$-34
$0075	$0AC8			INCF	STACK_8, F
$0076	$1903			BTFSC	STATUS, Z
$0077	$0AC9			INCF	STACK_9, F
$0078	$0844			MOVF	STACK_4, W
$0079	$0248			SUBWF	STACK_8, W
$007A	$1D03			BTFSS	STATUS, Z
$007B	$2855			GOTO	$-38
$007C	$0845			MOVF	STACK_5, W
$007D	$0249			SUBWF	STACK_9, W
$007E	$1D03			BTFSS	STATUS, Z
$007F	$2855			GOTO	$-42
$0080	$01C9			CLRF	STACK_9
$0081	$01C8			CLRF	STACK_8
$0082	$0AC0			INCF	STACK_0, F
$0083	$1903			BTFSC	STATUS, Z
$0084	$0AC1			INCF	STACK_1, F
$0085	$1FC1			BTFSS	STACK_1, 7
$0086	$2855			GOTO	$-49
$0087	$0000			NOP
$0088	$34FF			RETLW	255
$0089	$0008			RETURN
$008A	$	_main:
;D_84_16F84A_Flasher_v_4_0.c,31 :: 		void main(void)
;D_84_16F84A_Flasher_v_4_0.c,36 :: 		TRISA     = 0x00;
$008A	$1303			BCF	STATUS, RP1
$008B	$1683			BSF	STATUS, RP0
$008C	$0185			CLRF	TRISA, 1
;D_84_16F84A_Flasher_v_4_0.c,37 :: 		PORTA     = 0x00; //0000 0010
$008D	$1283			BCF	STATUS, RP0
$008E	$0185			CLRF	PORTA, 1
;D_84_16F84A_Flasher_v_4_0.c,38 :: 		TRISB     = 0x00;
$008F	$1683			BSF	STATUS, RP0
$0090	$0186			CLRF	TRISB, 1
;D_84_16F84A_Flasher_v_4_0.c,39 :: 		PORTB     = 0x00;
$0091	$1283			BCF	STATUS, RP0
$0092	$0186			CLRF	PORTB, 1
;D_84_16F84A_Flasher_v_4_0.c,41 :: 		OPTION_REG &= 0xDF;
$0093	$30DF			MOVLW	223
$0094	$1683			BSF	STATUS, RP0
$0095	$0581			ANDWF	OPTION_REG, 1
;D_84_16F84A_Flasher_v_4_0.c,43 :: 		count	= 0;
$0096	$018C			CLRF	_count, 1
;D_84_16F84A_Flasher_v_4_0.c,44 :: 		duty   = 0;
$0097	$018D			CLRF	_duty, 1
;D_84_16F84A_Flasher_v_4_0.c,46 :: 		TMR0  = 0;
$0098	$1283			BCF	STATUS, RP0
$0099	$0181			CLRF	TMR0, 1
;D_84_16F84A_Flasher_v_4_0.c,48 :: 		INTCON         |= 0x20;
$009A	$168B			BSF	INTCON, 5
;D_84_16F84A_Flasher_v_4_0.c,49 :: 		INTCON         |= 0x80;
$009B	$178B			BSF	INTCON, 7
;D_84_16F84A_Flasher_v_4_0.c,51 :: 		while(1)
$009C	$	L_main_3:
;D_84_16F84A_Flasher_v_4_0.c,53 :: 		j = rand() % 100;
$009C	$20DD			CALL	_rand
$009D	$3064			MOVLW	100
$009E	$00C4			MOVWF	STACK_4
$009F	$3000			MOVLW	0
$00A0	$00C5			MOVWF	STACK_4+1
$00A1	$2030			CALL	_div_16x16_s
$00A2	$0848			MOVF	STACK_8, 0
$00A3	$00C0			MOVWF	STACK_0
$00A4	$0849			MOVF	STACK_9, 0
$00A5	$00C1			MOVWF	STACK_1
$00A6	$0840			MOVF	STACK_0, 0
$00A7	$0097			MOVWF	main_j_L0
;D_84_16F84A_Flasher_v_4_0.c,55 :: 		for(i = j; i < 100; i++)
$00A8	$0840			MOVF	STACK_0, 0
$00A9	$0096			MOVWF	main_i_L0
$00AA	$	L_main_5:
$00AA	$3064			MOVLW	100
$00AB	$0216			SUBWF	main_i_L0, 0
$00AC	$1803			BTFSC	STATUS, C
$00AD	$28C1			GOTO	L_main_6
;D_84_16F84A_Flasher_v_4_0.c,57 :: 		duty = i;
$00AE	$0816			MOVF	main_i_L0, 0
$00AF	$008D			MOVWF	_duty
;D_84_16F84A_Flasher_v_4_0.c,58 :: 		Delay_ms(10);
$00B0	$3041			MOVLW	65
$00B1	$00CB			MOVWF	STACK_11
$00B2	$30FF			MOVLW	255
$00B3	$00CA			MOVWF	STACK_10
$00B4	$0BCB			DECFSZ	STACK_11, F
$00B5	$28B7			GOTO	$+2
$00B6	$28BA			GOTO	$+4
$00B7	$0BCA			DECFSZ	STACK_10, F
$00B8	$28B7			GOTO	$-1
$00B9	$28B4			GOTO	$-5
$00BA	$30C3			MOVLW	195
$00BB	$00CA			MOVWF	STACK_10
$00BC	$0BCA			DECFSZ	STACK_10, F
$00BD	$28BC			GOTO	$-1
$00BE	$0000			NOP
;D_84_16F84A_Flasher_v_4_0.c,59 :: 		}
$00BF	$	L_main_7:
;D_84_16F84A_Flasher_v_4_0.c,55 :: 		for(i = j; i < 100; i++)
$00BF	$0A96			INCF	main_i_L0, 1
;D_84_16F84A_Flasher_v_4_0.c,59 :: 		}
$00C0	$28AA			GOTO	L_main_5
$00C1	$	L_main_6:
;D_84_16F84A_Flasher_v_4_0.c,61 :: 		for(i = j; i < 100; i++)
$00C1	$0817			MOVF	main_j_L0, 0
$00C2	$0096			MOVWF	main_i_L0
$00C3	$	L_main_8:
$00C3	$3064			MOVLW	100
$00C4	$0216			SUBWF	main_i_L0, 0
$00C5	$1803			BTFSC	STATUS, C
$00C6	$28DB			GOTO	L_main_9
;D_84_16F84A_Flasher_v_4_0.c,63 :: 		duty = 99 - i;
$00C7	$0816			MOVF	main_i_L0, 0
$00C8	$3C63			SUBLW	99
$00C9	$008D			MOVWF	_duty
;D_84_16F84A_Flasher_v_4_0.c,64 :: 		Delay_ms(10);
$00CA	$3041			MOVLW	65
$00CB	$00CB			MOVWF	STACK_11
$00CC	$30FF			MOVLW	255
$00CD	$00CA			MOVWF	STACK_10
$00CE	$0BCB			DECFSZ	STACK_11, F
$00CF	$28D1			GOTO	$+2
$00D0	$28D4			GOTO	$+4
$00D1	$0BCA			DECFSZ	STACK_10, F
$00D2	$28D1			GOTO	$-1
$00D3	$28CE			GOTO	$-5
$00D4	$30C3			MOVLW	195
$00D5	$00CA			MOVWF	STACK_10
$00D6	$0BCA			DECFSZ	STACK_10, F
$00D7	$28D6			GOTO	$-1
$00D8	$0000			NOP
;D_84_16F84A_Flasher_v_4_0.c,65 :: 		}
$00D9	$	L_main_10:
;D_84_16F84A_Flasher_v_4_0.c,61 :: 		for(i = j; i < 100; i++)
$00D9	$0A96			INCF	main_i_L0, 1
;D_84_16F84A_Flasher_v_4_0.c,65 :: 		}
$00DA	$28C3			GOTO	L_main_8
$00DB	$	L_main_9:
;D_84_16F84A_Flasher_v_4_0.c,67 :: 		}//while(1)
$00DB	$289C			GOTO	L_main_3
;D_84_16F84A_Flasher_v_4_0.c,69 :: 		}//void main(void)
$00DC	$28DC			GOTO	$
