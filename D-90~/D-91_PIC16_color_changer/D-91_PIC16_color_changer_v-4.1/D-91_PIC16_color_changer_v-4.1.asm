;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 2014/09/07 10:24:25
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$29A4			GOTO	_main
$0082	$	__pulse:
;D-91_PIC16_color_changer_v-4.1.c,58 :: 		void _pulse(int num)
;D-91_PIC16_color_changer_v-4.1.c,62 :: 		for(i = 0; i < num; i++)
$0082	$1303			BCF	STATUS, RP1
$0083	$1283			BCF	STATUS, RP0
$0084	$019A			CLRF	_pulse_i_L0
$0085	$019B			CLRF	_pulse_i_L0+1
$0086	$	L__pulse_0:
$0086	$3080			MOVLW	128
$0087	$061B			XORWF	_pulse_i_L0+1, 0
$0088	$00C0			MOVWF	STACK_0
$0089	$3080			MOVLW	128
$008A	$0619			XORWF	FARG__pulse+1, 0
$008B	$0240			SUBWF	STACK_0, 0
$008C	$1D03			BTFSS	STATUS, Z
$008D	$2890			GOTO	L__pulse_48
$008E	$0818			MOVF	FARG__pulse+0, 0
$008F	$021A			SUBWF	_pulse_i_L0, 0
$0090	$	L__pulse_48:
$0090	$1803			BTFSC	STATUS, C
$0091	$28B9			GOTO	L__pulse_1
;D-91_PIC16_color_changer_v-4.1.c,65 :: 		PORTA = 0x01; Delay_ms(1);
$0092	$3001			MOVLW	1
$0093	$0085			MOVWF	PORTA
$0094	$3007			MOVLW	7
$0095	$00CB			MOVWF	STACK_11
$0096	$30FF			MOVLW	255
$0097	$00CA			MOVWF	STACK_10
$0098	$0BCB			DECFSZ	STACK_11, F
$0099	$289B			GOTO	$+2
$009A	$289E			GOTO	$+4
$009B	$0BCA			DECFSZ	STACK_10, F
$009C	$289B			GOTO	$-1
$009D	$2898			GOTO	$-5
$009E	$3078			MOVLW	120
$009F	$00CA			MOVWF	STACK_10
$00A0	$0BCA			DECFSZ	STACK_10, F
$00A1	$28A0			GOTO	$-1
$00A2	$0000			NOP
$00A3	$0000			NOP
;D-91_PIC16_color_changer_v-4.1.c,67 :: 		PORTA = 0x00; Delay_ms(1);
$00A4	$0185			CLRF	PORTA, 1
$00A5	$3007			MOVLW	7
$00A6	$00CB			MOVWF	STACK_11
$00A7	$30FF			MOVLW	255
$00A8	$00CA			MOVWF	STACK_10
$00A9	$0BCB			DECFSZ	STACK_11, F
$00AA	$28AC			GOTO	$+2
$00AB	$28AF			GOTO	$+4
$00AC	$0BCA			DECFSZ	STACK_10, F
$00AD	$28AC			GOTO	$-1
$00AE	$28A9			GOTO	$-5
$00AF	$3078			MOVLW	120
$00B0	$00CA			MOVWF	STACK_10
$00B1	$0BCA			DECFSZ	STACK_10, F
$00B2	$28B1			GOTO	$-1
$00B3	$0000			NOP
$00B4	$0000			NOP
;D-91_PIC16_color_changer_v-4.1.c,69 :: 		}
$00B5	$	L__pulse_2:
;D-91_PIC16_color_changer_v-4.1.c,62 :: 		for(i = 0; i < num; i++)
$00B5	$0A9A			INCF	_pulse_i_L0, 1
$00B6	$1903			BTFSC	STATUS, Z
$00B7	$0A9B			INCF	_pulse_i_L0+1, 1
;D-91_PIC16_color_changer_v-4.1.c,69 :: 		}
$00B8	$2886			GOTO	L__pulse_0
$00B9	$	L__pulse_1:
;D-91_PIC16_color_changer_v-4.1.c,71 :: 		}
$00B9	$0008			RETURN
$0144	$	__pulse_u_50:
;D-91_PIC16_color_changer_v-4.1.c,125 :: 		_pulse_u_50(int num)
;D-91_PIC16_color_changer_v-4.1.c,129 :: 		for(i = 0; i < num; i++)
$0144	$1303			BCF	STATUS, RP1
$0145	$1283			BCF	STATUS, RP0
$0146	$019A			CLRF	_pulse_u_50_i_L0
$0147	$019B			CLRF	_pulse_u_50_i_L0+1
$0148	$	L__pulse_u_50_12:
$0148	$3080			MOVLW	128
$0149	$061B			XORWF	_pulse_u_50_i_L0+1, 0
$014A	$00C0			MOVWF	STACK_0
$014B	$3080			MOVLW	128
$014C	$0619			XORWF	FARG__pulse_u_50+1, 0
$014D	$0240			SUBWF	STACK_0, 0
$014E	$1D03			BTFSS	STATUS, Z
$014F	$2952			GOTO	L__pulse_u_50_52
$0150	$0818			MOVF	FARG__pulse_u_50+0, 0
$0151	$021A			SUBWF	_pulse_u_50_i_L0, 0
$0152	$	L__pulse_u_50_52:
$0152	$1803			BTFSC	STATUS, C
$0153	$2963			GOTO	L__pulse_u_50_13
;D-91_PIC16_color_changer_v-4.1.c,132 :: 		PORTA = 0x01; Delay_us(50);
$0154	$3001			MOVLW	1
$0155	$0085			MOVWF	PORTA
$0156	$3053			MOVLW	83
$0157	$00CA			MOVWF	STACK_10
$0158	$0BCA			DECFSZ	STACK_10, F
$0159	$2958			GOTO	$-1
;D-91_PIC16_color_changer_v-4.1.c,134 :: 		PORTA = 0x00; Delay_us(50);
$015A	$0185			CLRF	PORTA, 1
$015B	$3053			MOVLW	83
$015C	$00CA			MOVWF	STACK_10
$015D	$0BCA			DECFSZ	STACK_10, F
$015E	$295D			GOTO	$-1
;D-91_PIC16_color_changer_v-4.1.c,136 :: 		}
$015F	$	L__pulse_u_50_14:
;D-91_PIC16_color_changer_v-4.1.c,129 :: 		for(i = 0; i < num; i++)
$015F	$0A9A			INCF	_pulse_u_50_i_L0, 1
$0160	$1903			BTFSC	STATUS, Z
$0161	$0A9B			INCF	_pulse_u_50_i_L0+1, 1
;D-91_PIC16_color_changer_v-4.1.c,136 :: 		}
$0162	$2948			GOTO	L__pulse_u_50_12
$0163	$	L__pulse_u_50_13:
;D-91_PIC16_color_changer_v-4.1.c,138 :: 		}//_pulse_u_50
$0163	$0008			RETURN
$0183	$	__while_PORTB_0x01:
;D-91_PIC16_color_changer_v-4.1.c,140 :: 		void _while_PORTB_0x01(int num)
;D-91_PIC16_color_changer_v-4.1.c,143 :: 		while((PORTB & 0x01) == num) //---------------------
$0183	$	L__while_PORTB_0x01_15:
$0183	$3001			MOVLW	1
$0184	$1303			BCF	STATUS, RP1
$0185	$1283			BCF	STATUS, RP0
$0186	$0506			ANDWF	PORTB, 0
$0187	$00C1			MOVWF	STACK_1
$0188	$3000			MOVLW	0
$0189	$0615			XORWF	FARG__while_PORTB_0x01+1, 0
$018A	$1D03			BTFSS	STATUS, Z
$018B	$298E			GOTO	L__while_PORTB_0x01_53
$018C	$0814			MOVF	FARG__while_PORTB_0x01+0, 0
$018D	$0641			XORWF	STACK_1, 0
$018E	$	L__while_PORTB_0x01_53:
$018E	$1D03			BTFSS	STATUS, Z
$018F	$299B			GOTO	L__while_PORTB_0x01_16
;D-91_PIC16_color_changer_v-4.1.c,146 :: 		if(TMR0 == 255)
$0190	$0801			MOVF	TMR0, 0
$0191	$3AFF			XORLW	255
$0192	$1D03			BTFSS	STATUS, Z
$0193	$299A			GOTO	L__while_PORTB_0x01_17
;D-91_PIC16_color_changer_v-4.1.c,150 :: 		_pulse(3);
$0194	$3003			MOVLW	3
$0195	$0098			MOVWF	FARG__pulse+0
$0196	$3000			MOVLW	0
$0197	$0099			MOVWF	FARG__pulse+1
$0198	$2082			CALL	__pulse
;D-91_PIC16_color_changer_v-4.1.c,153 :: 		return;
$0199	$0008			RETURN
;D-91_PIC16_color_changer_v-4.1.c,155 :: 		}
$019A	$	L__while_PORTB_0x01_17:
;D-91_PIC16_color_changer_v-4.1.c,157 :: 		}//while((PORTB & 0x01) == 0)
$019A	$2983			GOTO	L__while_PORTB_0x01_15
$019B	$	L__while_PORTB_0x01_16:
;D-91_PIC16_color_changer_v-4.1.c,159 :: 		return;
;D-91_PIC16_color_changer_v-4.1.c,161 :: 		}
$019B	$0008			RETURN
$00F1	$	__judge_TMR_:
;D-91_PIC16_color_changer_v-4.1.c,167 :: 		int _judge_TMR_(int low, int high) {
;D-91_PIC16_color_changer_v-4.1.c,169 :: 		if(TMR0 < low) //---------------------
$00F1	$3080			MOVLW	128
$00F2	$1303			BCF	STATUS, RP1
$00F3	$1283			BCF	STATUS, RP0
$00F4	$00C0			MOVWF	STACK_0
$00F5	$3080			MOVLW	128
$00F6	$0615			XORWF	FARG__judge_TMR_+1, 0
$00F7	$0240			SUBWF	STACK_0, 0
$00F8	$1D03			BTFSS	STATUS, Z
$00F9	$28FC			GOTO	L__judge_TMR__54
$00FA	$0814			MOVF	FARG__judge_TMR_+0, 0
$00FB	$0201			SUBWF	TMR0, 0
$00FC	$	L__judge_TMR__54:
$00FC	$1803			BTFSC	STATUS, C
$00FD	$2908			GOTO	L__judge_TMR__18
;D-91_PIC16_color_changer_v-4.1.c,172 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$00FE	$160B			BSF	INTCON, 4
;D-91_PIC16_color_changer_v-4.1.c,173 :: 		INTCON |= 0x80;        // interrupt => permitted
$00FF	$178B			BSF	INTCON, 7
;D-91_PIC16_color_changer_v-4.1.c,180 :: 		_pulse_u_50(3);
$0100	$3003			MOVLW	3
$0101	$0098			MOVWF	FARG__pulse_u_50+0
$0102	$3000			MOVLW	0
$0103	$0099			MOVWF	FARG__pulse_u_50+1
$0104	$2144			CALL	__pulse_u_50
;D-91_PIC16_color_changer_v-4.1.c,182 :: 		return false;                // return
$0105	$01C0			CLRF	STACK_0
$0106	$01C1			CLRF	STACK_0+1
$0107	$0008			RETURN
;D-91_PIC16_color_changer_v-4.1.c,193 :: 		} else if (TMR0 > high) {
$0108	$	L__judge_TMR__18:
$0108	$3080			MOVLW	128
$0109	$0617			XORWF	FARG__judge_TMR_+3, 0
$010A	$00C0			MOVWF	STACK_0
$010B	$3080			MOVLW	128
$010C	$0240			SUBWF	STACK_0, 0
$010D	$1D03			BTFSS	STATUS, Z
$010E	$2911			GOTO	L__judge_TMR__55
$010F	$0801			MOVF	TMR0, 0
$0110	$0216			SUBWF	FARG__judge_TMR_+2, 0
$0111	$	L__judge_TMR__55:
$0111	$1803			BTFSC	STATUS, C
$0112	$291D			GOTO	L__judge_TMR__20
;D-91_PIC16_color_changer_v-4.1.c,195 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$0113	$160B			BSF	INTCON, 4
;D-91_PIC16_color_changer_v-4.1.c,196 :: 		INTCON |= 0x80;        // interrupt => permitted
$0114	$178B			BSF	INTCON, 7
;D-91_PIC16_color_changer_v-4.1.c,199 :: 		_pulse_u_50(2);
$0115	$3002			MOVLW	2
$0116	$0098			MOVWF	FARG__pulse_u_50+0
$0117	$3000			MOVLW	0
$0118	$0099			MOVWF	FARG__pulse_u_50+1
$0119	$2144			CALL	__pulse_u_50
;D-91_PIC16_color_changer_v-4.1.c,202 :: 		return false;
$011A	$01C0			CLRF	STACK_0
$011B	$01C1			CLRF	STACK_0+1
$011C	$0008			RETURN
;D-91_PIC16_color_changer_v-4.1.c,204 :: 		}
$011D	$	L__judge_TMR__20:
$011D	$	L__judge_TMR__19:
;D-91_PIC16_color_changer_v-4.1.c,206 :: 		return true;
$011D	$3001			MOVLW	1
$011E	$00C0			MOVWF	STACK_0
$011F	$3000			MOVLW	0
$0120	$00C1			MOVWF	STACK_0+1
;D-91_PIC16_color_changer_v-4.1.c,208 :: 		}//int _judge_TMR_(int low, int high)
$0121	$0008			RETURN
$0122	$	__pulse_u_100:
;D-91_PIC16_color_changer_v-4.1.c,109 :: 		void _pulse_u_100(int num)
;D-91_PIC16_color_changer_v-4.1.c,113 :: 		for(i = 0; i < num; i++)
$0122	$1303			BCF	STATUS, RP1
$0123	$1283			BCF	STATUS, RP0
$0124	$0196			CLRF	_pulse_u_100_i_L0
$0125	$0197			CLRF	_pulse_u_100_i_L0+1
$0126	$	L__pulse_u_100_9:
$0126	$3080			MOVLW	128
$0127	$0617			XORWF	_pulse_u_100_i_L0+1, 0
$0128	$00C0			MOVWF	STACK_0
$0129	$3080			MOVLW	128
$012A	$0615			XORWF	FARG__pulse_u_100+1, 0
$012B	$0240			SUBWF	STACK_0, 0
$012C	$1D03			BTFSS	STATUS, Z
$012D	$2930			GOTO	L__pulse_u_100_51
$012E	$0814			MOVF	FARG__pulse_u_100+0, 0
$012F	$0216			SUBWF	_pulse_u_100_i_L0, 0
$0130	$	L__pulse_u_100_51:
$0130	$1803			BTFSC	STATUS, C
$0131	$2943			GOTO	L__pulse_u_100_10
;D-91_PIC16_color_changer_v-4.1.c,116 :: 		PORTA = 0x01; Delay_us(100);
$0132	$3001			MOVLW	1
$0133	$0085			MOVWF	PORTA
$0134	$30A6			MOVLW	166
$0135	$00CA			MOVWF	STACK_10
$0136	$0BCA			DECFSZ	STACK_10, F
$0137	$2936			GOTO	$-1
$0138	$0000			NOP
;D-91_PIC16_color_changer_v-4.1.c,118 :: 		PORTA = 0x00; Delay_us(100);
$0139	$0185			CLRF	PORTA, 1
$013A	$30A6			MOVLW	166
$013B	$00CA			MOVWF	STACK_10
$013C	$0BCA			DECFSZ	STACK_10, F
$013D	$293C			GOTO	$-1
$013E	$0000			NOP
;D-91_PIC16_color_changer_v-4.1.c,120 :: 		}
$013F	$	L__pulse_u_100_11:
;D-91_PIC16_color_changer_v-4.1.c,113 :: 		for(i = 0; i < num; i++)
$013F	$0A96			INCF	_pulse_u_100_i_L0, 1
$0140	$1903			BTFSC	STATUS, Z
$0141	$0A97			INCF	_pulse_u_100_i_L0+1, 1
;D-91_PIC16_color_changer_v-4.1.c,120 :: 		}
$0142	$2926			GOTO	L__pulse_u_100_9
$0143	$	L__pulse_u_100_10:
;D-91_PIC16_color_changer_v-4.1.c,122 :: 		}
$0143	$0008			RETURN
$00BA	$	__read_Reader:
;D-91_PIC16_color_changer_v-4.1.c,420 :: 		_read_Reader() {
;D-91_PIC16_color_changer_v-4.1.c,427 :: 		RESET_TMR;
$00BA	$1303			BCF	STATUS, RP1
$00BB	$1283			BCF	STATUS, RP0
$00BC	$0181			CLRF	TMR0, 1
;D-91_PIC16_color_changer_v-4.1.c,437 :: 		_while_PORTB_0x01(0);
$00BD	$0194			CLRF	FARG__while_PORTB_0x01+0
$00BE	$0195			CLRF	FARG__while_PORTB_0x01+1
$00BF	$2183			CALL	__while_PORTB_0x01
;D-91_PIC16_color_changer_v-4.1.c,448 :: 		result = _judge_TMR_(156, 196);
$00C0	$309C			MOVLW	156
$00C1	$1303			BCF	STATUS, RP1
$00C2	$1283			BCF	STATUS, RP0
$00C3	$0094			MOVWF	FARG__judge_TMR_+0
$00C4	$0195			CLRF	FARG__judge_TMR_+1
$00C5	$30C4			MOVLW	196
$00C6	$0096			MOVWF	FARG__judge_TMR_+2
$00C7	$0197			CLRF	FARG__judge_TMR_+3
$00C8	$20F1			CALL	__judge_TMR_
$00C9	$0840			MOVF	STACK_0, 0
$00CA	$008C			MOVWF	_result
;D-91_PIC16_color_changer_v-4.1.c,450 :: 		if (result == false) {
$00CB	$0840			MOVF	STACK_0, 0
$00CC	$3A00			XORLW	0
$00CD	$1D03			BTFSS	STATUS, Z
$00CE	$28D2			GOTO	L__read_Reader_35
;D-91_PIC16_color_changer_v-4.1.c,454 :: 		return false;
$00CF	$01C0			CLRF	STACK_0
$00D0	$01C1			CLRF	STACK_0+1
$00D1	$0008			RETURN
;D-91_PIC16_color_changer_v-4.1.c,456 :: 		}
$00D2	$	L__read_Reader_35:
;D-91_PIC16_color_changer_v-4.1.c,468 :: 		RESET_TMR;
$00D2	$0181			CLRF	TMR0, 1
;D-91_PIC16_color_changer_v-4.1.c,475 :: 		_while_PORTB_0x01(1);
$00D3	$3001			MOVLW	1
$00D4	$0094			MOVWF	FARG__while_PORTB_0x01+0
$00D5	$3000			MOVLW	0
$00D6	$0095			MOVWF	FARG__while_PORTB_0x01+1
$00D7	$2183			CALL	__while_PORTB_0x01
;D-91_PIC16_color_changer_v-4.1.c,482 :: 		result = _judge_TMR_(68, 108);
$00D8	$3044			MOVLW	68
$00D9	$1303			BCF	STATUS, RP1
$00DA	$1283			BCF	STATUS, RP0
$00DB	$0094			MOVWF	FARG__judge_TMR_+0
$00DC	$3000			MOVLW	0
$00DD	$0095			MOVWF	FARG__judge_TMR_+1
$00DE	$306C			MOVLW	108
$00DF	$0096			MOVWF	FARG__judge_TMR_+2
$00E0	$3000			MOVLW	0
$00E1	$0097			MOVWF	FARG__judge_TMR_+3
$00E2	$20F1			CALL	__judge_TMR_
$00E3	$0840			MOVF	STACK_0, 0
$00E4	$008C			MOVWF	_result
;D-91_PIC16_color_changer_v-4.1.c,484 :: 		if (result == false) {
$00E5	$0840			MOVF	STACK_0, 0
$00E6	$3A00			XORLW	0
$00E7	$1D03			BTFSS	STATUS, Z
$00E8	$28EC			GOTO	L__read_Reader_36
;D-91_PIC16_color_changer_v-4.1.c,488 :: 		return false;
$00E9	$01C0			CLRF	STACK_0
$00EA	$01C1			CLRF	STACK_0+1
$00EB	$0008			RETURN
;D-91_PIC16_color_changer_v-4.1.c,490 :: 		}
$00EC	$	L__read_Reader_36:
;D-91_PIC16_color_changer_v-4.1.c,497 :: 		return true;
$00EC	$3001			MOVLW	1
$00ED	$00C0			MOVWF	STACK_0
$00EE	$3000			MOVLW	0
$00EF	$00C1			MOVWF	STACK_0+1
;D-91_PIC16_color_changer_v-4.1.c,499 :: 		}//_read_Reader
$00F0	$0008			RETURN
$0032	$	__read_Custom:
;D-91_PIC16_color_changer_v-4.1.c,502 :: 		_read_Custom() {
;D-91_PIC16_color_changer_v-4.1.c,504 :: 		custom_code_a = 0x00;
$0032	$1303			BCF	STATUS, RP1
$0033	$1283			BCF	STATUS, RP0
$0034	$018D			CLRF	_custom_code_a, 1
;D-91_PIC16_color_changer_v-4.1.c,508 :: 		for(i = 0; i < bit_len; i++)
$0035	$018E			CLRF	_i, 1
$0036	$	L__read_Custom_37:
$0036	$080F			MOVF	_bit_len, 0
$0037	$020E			SUBWF	_i, 0
$0038	$1803			BTFSC	STATUS, C
$0039	$2881			GOTO	L__read_Custom_38
;D-91_PIC16_color_changer_v-4.1.c,510 :: 		RESET_TMR;
$003A	$0181			CLRF	TMR0, 1
;D-91_PIC16_color_changer_v-4.1.c,512 :: 		while((PORTB & 0x01) == 0)
$003B	$	L__read_Custom_40:
$003B	$3001			MOVLW	1
$003C	$0506			ANDWF	PORTB, 0
$003D	$00C1			MOVWF	STACK_1
$003E	$0841			MOVF	STACK_1, 0
$003F	$3A00			XORLW	0
$0040	$1D03			BTFSS	STATUS, Z
$0041	$284D			GOTO	L__read_Custom_41
;D-91_PIC16_color_changer_v-4.1.c,515 :: 		TIME_OUT;
$0042	$0801			MOVF	TMR0, 0
$0043	$3AFF			XORLW	255
$0044	$1D03			BTFSS	STATUS, Z
$0045	$284C			GOTO	L__read_Custom_42
$0046	$3001			MOVLW	1
$0047	$0094			MOVWF	FARG__pulse_u_100+0
$0048	$3000			MOVLW	0
$0049	$0095			MOVWF	FARG__pulse_u_100+1
$004A	$2122			CALL	__pulse_u_100
$004B	$284D			GOTO	L__read_Custom_41
$004C	$	L__read_Custom_42:
;D-91_PIC16_color_changer_v-4.1.c,517 :: 		}
$004C	$283B			GOTO	L__read_Custom_40
$004D	$	L__read_Custom_41:
;D-91_PIC16_color_changer_v-4.1.c,519 :: 		while((PORTB & 0x01) == 1)
$004D	$	L__read_Custom_43:
$004D	$3001			MOVLW	1
$004E	$0506			ANDWF	PORTB, 0
$004F	$00C1			MOVWF	STACK_1
$0050	$0841			MOVF	STACK_1, 0
$0051	$3A01			XORLW	1
$0052	$1D03			BTFSS	STATUS, Z
$0053	$285F			GOTO	L__read_Custom_44
;D-91_PIC16_color_changer_v-4.1.c,522 :: 		TIME_OUT;
$0054	$0801			MOVF	TMR0, 0
$0055	$3AFF			XORLW	255
$0056	$1D03			BTFSS	STATUS, Z
$0057	$285E			GOTO	L__read_Custom_45
$0058	$3001			MOVLW	1
$0059	$0094			MOVWF	FARG__pulse_u_100+0
$005A	$3000			MOVLW	0
$005B	$0095			MOVWF	FARG__pulse_u_100+1
$005C	$2122			CALL	__pulse_u_100
$005D	$285F			GOTO	L__read_Custom_44
$005E	$	L__read_Custom_45:
;D-91_PIC16_color_changer_v-4.1.c,524 :: 		}
$005E	$284D			GOTO	L__read_Custom_43
$005F	$	L__read_Custom_44:
;D-91_PIC16_color_changer_v-4.1.c,526 :: 		if (TMR0 < 33)
$005F	$3021			MOVLW	33
$0060	$0201			SUBWF	TMR0, 0
$0061	$1803			BTFSC	STATUS, C
$0062	$2872			GOTO	L__read_Custom_46
;D-91_PIC16_color_changer_v-4.1.c,529 :: 		custom_code_a &= ~(0x01 << i);
$0063	$080E			MOVF	_i, 0
$0064	$00C1			MOVWF	STACK_1
$0065	$3001			MOVLW	1
$0066	$00C0			MOVWF	STACK_0
$0067	$0841			MOVF	STACK_1, 0
$0068	$	L__read_Custom_60:
$0068	$1903			BTFSC	STATUS, Z
$0069	$286E			GOTO	L__read_Custom_61
$006A	$0DC0			RLF	STACK_0, 1
$006B	$1040			BCF	STACK_0, 0
$006C	$3FFF			ADDLW	255
$006D	$2868			GOTO	L__read_Custom_60
$006E	$	L__read_Custom_61:
$006E	$09C0			COMF	STACK_0, F
$006F	$0840			MOVF	STACK_0, 0
$0070	$058D			ANDWF	_custom_code_a, 1
;D-91_PIC16_color_changer_v-4.1.c,531 :: 		}
$0071	$287F			GOTO	L__read_Custom_47
$0072	$	L__read_Custom_46:
;D-91_PIC16_color_changer_v-4.1.c,535 :: 		custom_code_a |= (0x01 << i);
$0072	$080E			MOVF	_i, 0
$0073	$00C1			MOVWF	STACK_1
$0074	$3001			MOVLW	1
$0075	$00C0			MOVWF	STACK_0
$0076	$0841			MOVF	STACK_1, 0
$0077	$	L__read_Custom_62:
$0077	$1903			BTFSC	STATUS, Z
$0078	$287D			GOTO	L__read_Custom_63
$0079	$0DC0			RLF	STACK_0, 1
$007A	$1040			BCF	STACK_0, 0
$007B	$3FFF			ADDLW	255
$007C	$2877			GOTO	L__read_Custom_62
$007D	$	L__read_Custom_63:
$007D	$0840			MOVF	STACK_0, 0
$007E	$048D			IORWF	_custom_code_a, 1
;D-91_PIC16_color_changer_v-4.1.c,537 :: 		}//if (TMR0 < 33)
$007F	$	L__read_Custom_47:
;D-91_PIC16_color_changer_v-4.1.c,539 :: 		}//for(i = 0; i < bit_len; i++)
$007F	$	L__read_Custom_39:
;D-91_PIC16_color_changer_v-4.1.c,508 :: 		for(i = 0; i < bit_len; i++)
$007F	$0A8E			INCF	_i, 1
;D-91_PIC16_color_changer_v-4.1.c,539 :: 		}//for(i = 0; i < bit_len; i++)
$0080	$2836			GOTO	L__read_Custom_37
$0081	$	L__read_Custom_38:
;D-91_PIC16_color_changer_v-4.1.c,542 :: 		}//_read_Custom
$0081	$0008			RETURN
$019C	$	__response:
;D-91_PIC16_color_changer_v-4.1.c,210 :: 		void _response(void)
;D-91_PIC16_color_changer_v-4.1.c,213 :: 		_pulse_u_100(5);
$019C	$3005			MOVLW	5
$019D	$1303			BCF	STATUS, RP1
$019E	$1283			BCF	STATUS, RP0
$019F	$0094			MOVWF	FARG__pulse_u_100+0
$01A0	$3000			MOVLW	0
$01A1	$0095			MOVWF	FARG__pulse_u_100+1
$01A2	$2122			CALL	__pulse_u_100
;D-91_PIC16_color_changer_v-4.1.c,257 :: 		}
$01A3	$0008			RETURN
$0004	$	_interrupt:
$0004	$00CF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$0092			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$0091			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$0093			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0840			MOVF	STACK_0, 0
$000E	$009C			MOVWF	STSAVED_0
;D-91_PIC16_color_changer_v-4.1.c,310 :: 		void interrupt(void)
;D-91_PIC16_color_changer_v-4.1.c,321 :: 		INTCON &= 0x7F;  // interrupt => forbidden
$000F	$307F			MOVLW	127
$0010	$058B			ANDWF	INTCON, 1
;D-91_PIC16_color_changer_v-4.1.c,322 :: 		INTCON &= 0xEF;  // INT interrupt => forbidden
$0011	$30EF			MOVLW	239
$0012	$058B			ANDWF	INTCON, 1
;D-91_PIC16_color_changer_v-4.1.c,323 :: 		INTCON &= 0xFD;  // INT interrupt flag => cleared
$0013	$30FD			MOVLW	253
$0014	$058B			ANDWF	INTCON, 1
;D-91_PIC16_color_changer_v-4.1.c,330 :: 		PORTA = 0x00;
$0015	$0185			CLRF	PORTA, 1
;D-91_PIC16_color_changer_v-4.1.c,337 :: 		result = _read_Reader();
$0016	$20BA			CALL	__read_Reader
$0017	$0840			MOVF	STACK_0, 0
$0018	$008C			MOVWF	_result
;D-91_PIC16_color_changer_v-4.1.c,344 :: 		if (result == false) {
$0019	$0840			MOVF	STACK_0, 0
$001A	$3A00			XORLW	0
$001B	$1D03			BTFSS	STATUS, Z
$001C	$281E			GOTO	L_interrupt_32
;D-91_PIC16_color_changer_v-4.1.c,348 :: 		return;
$001D	$2827			GOTO	L_Interrupt_end
;D-91_PIC16_color_changer_v-4.1.c,350 :: 		}
$001E	$	L_interrupt_32:
;D-91_PIC16_color_changer_v-4.1.c,357 :: 		_read_Custom();
$001E	$2032			CALL	__read_Custom
;D-91_PIC16_color_changer_v-4.1.c,360 :: 		_pulse_u_50(1);
$001F	$3001			MOVLW	1
$0020	$0098			MOVWF	FARG__pulse_u_50+0
$0021	$3000			MOVLW	0
$0022	$0099			MOVWF	FARG__pulse_u_50+1
$0023	$2144			CALL	__pulse_u_50
;D-91_PIC16_color_changer_v-4.1.c,367 :: 		_response();
$0024	$219C			CALL	__response
;D-91_PIC16_color_changer_v-4.1.c,375 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$0025	$160B			BSF	INTCON, 4
;D-91_PIC16_color_changer_v-4.1.c,376 :: 		INTCON |= 0x80;
$0026	$178B			BSF	INTCON, 7
;D-91_PIC16_color_changer_v-4.1.c,378 :: 		}//void interrupt(void)
$0027	$	L_Interrupt_end:
$0027	$081C			MOVF	STSAVED_0, 0
$0028	$00C0			MOVWF	STACK_0
$0029	$0813			MOVF	?savePCLATH, 0
$002A	$008A			MOVWF	PCLATH
$002B	$0811			MOVF	?saveFSR, 0
$002C	$0084			MOVWF	FSR
$002D	$0E12			SWAPF	?saveSTATUS, 0
$002E	$0083			MOVWF	STATUS
$002F	$0ECF			SWAPF	STACK_15, 1
$0030	$0E4F			SWAPF	STACK_15, 0
$0031	$0009			RETFIE
$0164	$	__main_Setup:
;D-91_PIC16_color_changer_v-4.1.c,545 :: 		_main_Setup() {
;D-91_PIC16_color_changer_v-4.1.c,548 :: 		TRISA     = 0x00;
$0164	$1303			BCF	STATUS, RP1
$0165	$1683			BSF	STATUS, RP0
$0166	$0185			CLRF	TRISA, 1
;D-91_PIC16_color_changer_v-4.1.c,549 :: 		PORTA     = 0x00;		//0000 0010
$0167	$1283			BCF	STATUS, RP0
$0168	$0185			CLRF	PORTA, 1
;D-91_PIC16_color_changer_v-4.1.c,551 :: 		TRISB     = 0xFF;		// Input: RB0 ~ RB7
$0169	$30FF			MOVLW	255
$016A	$1683			BSF	STATUS, RP0
$016B	$0086			MOVWF	TRISB
;D-91_PIC16_color_changer_v-4.1.c,553 :: 		OPTION_REG &= 0x7F;	// Pull-up => on
$016C	$307F			MOVLW	127
$016D	$0501			ANDWF	OPTION_REG, 0
$016E	$00C0			MOVWF	STACK_0
$016F	$0840			MOVF	STACK_0, 0
$0170	$0081			MOVWF	OPTION_REG
;D-91_PIC16_color_changer_v-4.1.c,555 :: 		OPTION_REG &= 0xBF;	// INT interrupt => by 5V ~> 0V
$0171	$30BF			MOVLW	191
$0172	$05C0			ANDWF	STACK_0, 1
$0173	$0840			MOVF	STACK_0, 0
$0174	$0081			MOVWF	OPTION_REG
;D-91_PIC16_color_changer_v-4.1.c,557 :: 		OPTION_REG &= 0xDF;	// Timer by clock
$0175	$30DF			MOVLW	223
$0176	$05C0			ANDWF	STACK_0, 1
$0177	$0840			MOVF	STACK_0, 0
$0178	$0081			MOVWF	OPTION_REG
;D-91_PIC16_color_changer_v-4.1.c,558 :: 		OPTION_REG &= 0xF0;	// Prescaler => on
$0179	$30F0			MOVLW	240
$017A	$05C0			ANDWF	STACK_0, 1
$017B	$0840			MOVF	STACK_0, 0
$017C	$0081			MOVWF	OPTION_REG
;D-91_PIC16_color_changer_v-4.1.c,559 :: 		OPTION_REG |= 0x07; // Prescaler => 1/256
$017D	$3007			MOVLW	7
$017E	$0440			IORWF	STACK_0, 0
$017F	$0081			MOVWF	OPTION_REG
;D-91_PIC16_color_changer_v-4.1.c,566 :: 		bit_len = 4;
$0180	$3004			MOVLW	4
$0181	$008F			MOVWF	_bit_len
;D-91_PIC16_color_changer_v-4.1.c,568 :: 		}//_main_Setup
$0182	$0008			RETURN
$01A9	$	GlobalIniD-91_PIC16_color_changer_v-4:
$01A9	$3001			MOVLW	1
$01AA	$1303			BCF	STATUS, RP1
$01AB	$1283			BCF	STATUS, RP0
$01AC	$0090			MOVWF	_LED_FLAG+0
$01AD	$0008			RETURN
$01A4	$	_main:
;D-91_PIC16_color_changer_v-4.1.c,381 :: 		void main(void)
;D-91_PIC16_color_changer_v-4.1.c,384 :: 		_main_Setup();
$01A4	$2164			CALL	__main_Setup
;D-91_PIC16_color_changer_v-4.1.c,406 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$01A5	$160B			BSF	INTCON, 4
;D-91_PIC16_color_changer_v-4.1.c,407 :: 		INTCON |= 0x80;
$01A6	$178B			BSF	INTCON, 7
;D-91_PIC16_color_changer_v-4.1.c,409 :: 		while(1)
$01A7	$	L_main_33:
$01A7	$29A7			GOTO	L_main_33
;D-91_PIC16_color_changer_v-4.1.c,417 :: 		}//void main(void)
$01A8	$29A8			GOTO	$
