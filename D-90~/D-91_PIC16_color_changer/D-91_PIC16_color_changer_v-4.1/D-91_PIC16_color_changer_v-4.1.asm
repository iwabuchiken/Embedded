;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 2014/09/07 11:24:10
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$294E			GOTO	_main
$002C	$	__pulse:
;D-91_PIC16_color_changer_v-4.1.c,58 :: 		void _pulse(int num)
;D-91_PIC16_color_changer_v-4.1.c,62 :: 		for(i = 0; i < num; i++)
$002C	$1303			BCF	STATUS, RP1
$002D	$1283			BCF	STATUS, RP0
$002E	$0198			CLRF	_pulse_i_L0
$002F	$0199			CLRF	_pulse_i_L0+1
$0030	$	L__pulse_0:
$0030	$3080			MOVLW	128
$0031	$0619			XORWF	_pulse_i_L0+1, 0
$0032	$00C0			MOVWF	STACK_0
$0033	$3080			MOVLW	128
$0034	$0617			XORWF	FARG__pulse+1, 0
$0035	$0240			SUBWF	STACK_0, 0
$0036	$1D03			BTFSS	STATUS, Z
$0037	$283A			GOTO	L__pulse_48
$0038	$0816			MOVF	FARG__pulse+0, 0
$0039	$0218			SUBWF	_pulse_i_L0, 0
$003A	$	L__pulse_48:
$003A	$1803			BTFSC	STATUS, C
$003B	$2863			GOTO	L__pulse_1
;D-91_PIC16_color_changer_v-4.1.c,65 :: 		PORTA = 0x01; Delay_ms(1);
$003C	$3001			MOVLW	1
$003D	$0085			MOVWF	PORTA
$003E	$3007			MOVLW	7
$003F	$00CB			MOVWF	STACK_11
$0040	$30FF			MOVLW	255
$0041	$00CA			MOVWF	STACK_10
$0042	$0BCB			DECFSZ	STACK_11, F
$0043	$2845			GOTO	$+2
$0044	$2848			GOTO	$+4
$0045	$0BCA			DECFSZ	STACK_10, F
$0046	$2845			GOTO	$-1
$0047	$2842			GOTO	$-5
$0048	$3078			MOVLW	120
$0049	$00CA			MOVWF	STACK_10
$004A	$0BCA			DECFSZ	STACK_10, F
$004B	$284A			GOTO	$-1
$004C	$0000			NOP
$004D	$0000			NOP
;D-91_PIC16_color_changer_v-4.1.c,67 :: 		PORTA = 0x00; Delay_ms(1);
$004E	$0185			CLRF	PORTA, 1
$004F	$3007			MOVLW	7
$0050	$00CB			MOVWF	STACK_11
$0051	$30FF			MOVLW	255
$0052	$00CA			MOVWF	STACK_10
$0053	$0BCB			DECFSZ	STACK_11, F
$0054	$2856			GOTO	$+2
$0055	$2859			GOTO	$+4
$0056	$0BCA			DECFSZ	STACK_10, F
$0057	$2856			GOTO	$-1
$0058	$2853			GOTO	$-5
$0059	$3078			MOVLW	120
$005A	$00CA			MOVWF	STACK_10
$005B	$0BCA			DECFSZ	STACK_10, F
$005C	$285B			GOTO	$-1
$005D	$0000			NOP
$005E	$0000			NOP
;D-91_PIC16_color_changer_v-4.1.c,69 :: 		}
$005F	$	L__pulse_2:
;D-91_PIC16_color_changer_v-4.1.c,62 :: 		for(i = 0; i < num; i++)
$005F	$0A98			INCF	_pulse_i_L0, 1
$0060	$1903			BTFSC	STATUS, Z
$0061	$0A99			INCF	_pulse_i_L0+1, 1
;D-91_PIC16_color_changer_v-4.1.c,69 :: 		}
$0062	$2830			GOTO	L__pulse_0
$0063	$	L__pulse_1:
;D-91_PIC16_color_changer_v-4.1.c,71 :: 		}
$0063	$0008			RETURN
$00EE	$	__pulse_u_50:
;D-91_PIC16_color_changer_v-4.1.c,125 :: 		_pulse_u_50(int num)
;D-91_PIC16_color_changer_v-4.1.c,129 :: 		for(i = 0; i < num; i++)
$00EE	$1303			BCF	STATUS, RP1
$00EF	$1283			BCF	STATUS, RP0
$00F0	$0198			CLRF	_pulse_u_50_i_L0
$00F1	$0199			CLRF	_pulse_u_50_i_L0+1
$00F2	$	L__pulse_u_50_12:
$00F2	$3080			MOVLW	128
$00F3	$0619			XORWF	_pulse_u_50_i_L0+1, 0
$00F4	$00C0			MOVWF	STACK_0
$00F5	$3080			MOVLW	128
$00F6	$0617			XORWF	FARG__pulse_u_50+1, 0
$00F7	$0240			SUBWF	STACK_0, 0
$00F8	$1D03			BTFSS	STATUS, Z
$00F9	$28FC			GOTO	L__pulse_u_50_52
$00FA	$0816			MOVF	FARG__pulse_u_50+0, 0
$00FB	$0218			SUBWF	_pulse_u_50_i_L0, 0
$00FC	$	L__pulse_u_50_52:
$00FC	$1803			BTFSC	STATUS, C
$00FD	$290D			GOTO	L__pulse_u_50_13
;D-91_PIC16_color_changer_v-4.1.c,132 :: 		PORTA = 0x01; Delay_us(50);
$00FE	$3001			MOVLW	1
$00FF	$0085			MOVWF	PORTA
$0100	$3053			MOVLW	83
$0101	$00CA			MOVWF	STACK_10
$0102	$0BCA			DECFSZ	STACK_10, F
$0103	$2902			GOTO	$-1
;D-91_PIC16_color_changer_v-4.1.c,134 :: 		PORTA = 0x00; Delay_us(50);
$0104	$0185			CLRF	PORTA, 1
$0105	$3053			MOVLW	83
$0106	$00CA			MOVWF	STACK_10
$0107	$0BCA			DECFSZ	STACK_10, F
$0108	$2907			GOTO	$-1
;D-91_PIC16_color_changer_v-4.1.c,136 :: 		}
$0109	$	L__pulse_u_50_14:
;D-91_PIC16_color_changer_v-4.1.c,129 :: 		for(i = 0; i < num; i++)
$0109	$0A98			INCF	_pulse_u_50_i_L0, 1
$010A	$1903			BTFSC	STATUS, Z
$010B	$0A99			INCF	_pulse_u_50_i_L0+1, 1
;D-91_PIC16_color_changer_v-4.1.c,136 :: 		}
$010C	$28F2			GOTO	L__pulse_u_50_12
$010D	$	L__pulse_u_50_13:
;D-91_PIC16_color_changer_v-4.1.c,138 :: 		}//_pulse_u_50
$010D	$0008			RETURN
$012D	$	__while_PORTB_0x01:
;D-91_PIC16_color_changer_v-4.1.c,140 :: 		void _while_PORTB_0x01(int num)
;D-91_PIC16_color_changer_v-4.1.c,143 :: 		while((PORTB & 0x01) == num) //---------------------
$012D	$	L__while_PORTB_0x01_15:
$012D	$3001			MOVLW	1
$012E	$1303			BCF	STATUS, RP1
$012F	$1283			BCF	STATUS, RP0
$0130	$0506			ANDWF	PORTB, 0
$0131	$00C1			MOVWF	STACK_1
$0132	$3000			MOVLW	0
$0133	$0613			XORWF	FARG__while_PORTB_0x01+1, 0
$0134	$1D03			BTFSS	STATUS, Z
$0135	$2938			GOTO	L__while_PORTB_0x01_53
$0136	$0812			MOVF	FARG__while_PORTB_0x01+0, 0
$0137	$0641			XORWF	STACK_1, 0
$0138	$	L__while_PORTB_0x01_53:
$0138	$1D03			BTFSS	STATUS, Z
$0139	$2945			GOTO	L__while_PORTB_0x01_16
;D-91_PIC16_color_changer_v-4.1.c,146 :: 		if(TMR0 == 255)
$013A	$0801			MOVF	TMR0, 0
$013B	$3AFF			XORLW	255
$013C	$1D03			BTFSS	STATUS, Z
$013D	$2944			GOTO	L__while_PORTB_0x01_17
;D-91_PIC16_color_changer_v-4.1.c,150 :: 		_pulse(3);
$013E	$3003			MOVLW	3
$013F	$0096			MOVWF	FARG__pulse+0
$0140	$3000			MOVLW	0
$0141	$0097			MOVWF	FARG__pulse+1
$0142	$202C			CALL	__pulse
;D-91_PIC16_color_changer_v-4.1.c,153 :: 		return;
$0143	$0008			RETURN
;D-91_PIC16_color_changer_v-4.1.c,155 :: 		}
$0144	$	L__while_PORTB_0x01_17:
;D-91_PIC16_color_changer_v-4.1.c,157 :: 		}//while((PORTB & 0x01) == 0)
$0144	$292D			GOTO	L__while_PORTB_0x01_15
$0145	$	L__while_PORTB_0x01_16:
;D-91_PIC16_color_changer_v-4.1.c,159 :: 		return;
;D-91_PIC16_color_changer_v-4.1.c,161 :: 		}
$0145	$0008			RETURN
$009B	$	__judge_TMR_:
;D-91_PIC16_color_changer_v-4.1.c,167 :: 		int _judge_TMR_(int low, int high) {
;D-91_PIC16_color_changer_v-4.1.c,169 :: 		if(TMR0 < low) //---------------------
$009B	$3080			MOVLW	128
$009C	$1303			BCF	STATUS, RP1
$009D	$1283			BCF	STATUS, RP0
$009E	$00C0			MOVWF	STACK_0
$009F	$3080			MOVLW	128
$00A0	$0613			XORWF	FARG__judge_TMR_+1, 0
$00A1	$0240			SUBWF	STACK_0, 0
$00A2	$1D03			BTFSS	STATUS, Z
$00A3	$28A6			GOTO	L__judge_TMR__54
$00A4	$0812			MOVF	FARG__judge_TMR_+0, 0
$00A5	$0201			SUBWF	TMR0, 0
$00A6	$	L__judge_TMR__54:
$00A6	$1803			BTFSC	STATUS, C
$00A7	$28B2			GOTO	L__judge_TMR__18
;D-91_PIC16_color_changer_v-4.1.c,172 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$00A8	$160B			BSF	INTCON, 4
;D-91_PIC16_color_changer_v-4.1.c,173 :: 		INTCON |= 0x80;        // interrupt => permitted
$00A9	$178B			BSF	INTCON, 7
;D-91_PIC16_color_changer_v-4.1.c,180 :: 		_pulse_u_50(3);
$00AA	$3003			MOVLW	3
$00AB	$0096			MOVWF	FARG__pulse_u_50+0
$00AC	$3000			MOVLW	0
$00AD	$0097			MOVWF	FARG__pulse_u_50+1
$00AE	$20EE			CALL	__pulse_u_50
;D-91_PIC16_color_changer_v-4.1.c,182 :: 		return false;                // return
$00AF	$01C0			CLRF	STACK_0
$00B0	$01C1			CLRF	STACK_0+1
$00B1	$0008			RETURN
;D-91_PIC16_color_changer_v-4.1.c,193 :: 		} else if (TMR0 > high) {
$00B2	$	L__judge_TMR__18:
$00B2	$3080			MOVLW	128
$00B3	$0615			XORWF	FARG__judge_TMR_+3, 0
$00B4	$00C0			MOVWF	STACK_0
$00B5	$3080			MOVLW	128
$00B6	$0240			SUBWF	STACK_0, 0
$00B7	$1D03			BTFSS	STATUS, Z
$00B8	$28BB			GOTO	L__judge_TMR__55
$00B9	$0801			MOVF	TMR0, 0
$00BA	$0214			SUBWF	FARG__judge_TMR_+2, 0
$00BB	$	L__judge_TMR__55:
$00BB	$1803			BTFSC	STATUS, C
$00BC	$28C7			GOTO	L__judge_TMR__20
;D-91_PIC16_color_changer_v-4.1.c,195 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$00BD	$160B			BSF	INTCON, 4
;D-91_PIC16_color_changer_v-4.1.c,196 :: 		INTCON |= 0x80;        // interrupt => permitted
$00BE	$178B			BSF	INTCON, 7
;D-91_PIC16_color_changer_v-4.1.c,199 :: 		_pulse_u_50(2);
$00BF	$3002			MOVLW	2
$00C0	$0096			MOVWF	FARG__pulse_u_50+0
$00C1	$3000			MOVLW	0
$00C2	$0097			MOVWF	FARG__pulse_u_50+1
$00C3	$20EE			CALL	__pulse_u_50
;D-91_PIC16_color_changer_v-4.1.c,202 :: 		return false;
$00C4	$01C0			CLRF	STACK_0
$00C5	$01C1			CLRF	STACK_0+1
$00C6	$0008			RETURN
;D-91_PIC16_color_changer_v-4.1.c,204 :: 		}
$00C7	$	L__judge_TMR__20:
$00C7	$	L__judge_TMR__19:
;D-91_PIC16_color_changer_v-4.1.c,206 :: 		return true;
$00C7	$3001			MOVLW	1
$00C8	$00C0			MOVWF	STACK_0
$00C9	$3000			MOVLW	0
$00CA	$00C1			MOVWF	STACK_0+1
;D-91_PIC16_color_changer_v-4.1.c,208 :: 		}//int _judge_TMR_(int low, int high)
$00CB	$0008			RETURN
$00CC	$	__pulse_u_100:
;D-91_PIC16_color_changer_v-4.1.c,109 :: 		void _pulse_u_100(int num)
;D-91_PIC16_color_changer_v-4.1.c,113 :: 		for(i = 0; i < num; i++)
$00CC	$1303			BCF	STATUS, RP1
$00CD	$1283			BCF	STATUS, RP0
$00CE	$0194			CLRF	_pulse_u_100_i_L0
$00CF	$0195			CLRF	_pulse_u_100_i_L0+1
$00D0	$	L__pulse_u_100_9:
$00D0	$3080			MOVLW	128
$00D1	$0615			XORWF	_pulse_u_100_i_L0+1, 0
$00D2	$00C0			MOVWF	STACK_0
$00D3	$3080			MOVLW	128
$00D4	$0613			XORWF	FARG__pulse_u_100+1, 0
$00D5	$0240			SUBWF	STACK_0, 0
$00D6	$1D03			BTFSS	STATUS, Z
$00D7	$28DA			GOTO	L__pulse_u_100_51
$00D8	$0812			MOVF	FARG__pulse_u_100+0, 0
$00D9	$0214			SUBWF	_pulse_u_100_i_L0, 0
$00DA	$	L__pulse_u_100_51:
$00DA	$1803			BTFSC	STATUS, C
$00DB	$28ED			GOTO	L__pulse_u_100_10
;D-91_PIC16_color_changer_v-4.1.c,116 :: 		PORTA = 0x01; Delay_us(100);
$00DC	$3001			MOVLW	1
$00DD	$0085			MOVWF	PORTA
$00DE	$30A6			MOVLW	166
$00DF	$00CA			MOVWF	STACK_10
$00E0	$0BCA			DECFSZ	STACK_10, F
$00E1	$28E0			GOTO	$-1
$00E2	$0000			NOP
;D-91_PIC16_color_changer_v-4.1.c,118 :: 		PORTA = 0x00; Delay_us(100);
$00E3	$0185			CLRF	PORTA, 1
$00E4	$30A6			MOVLW	166
$00E5	$00CA			MOVWF	STACK_10
$00E6	$0BCA			DECFSZ	STACK_10, F
$00E7	$28E6			GOTO	$-1
$00E8	$0000			NOP
;D-91_PIC16_color_changer_v-4.1.c,120 :: 		}
$00E9	$	L__pulse_u_100_11:
;D-91_PIC16_color_changer_v-4.1.c,113 :: 		for(i = 0; i < num; i++)
$00E9	$0A94			INCF	_pulse_u_100_i_L0, 1
$00EA	$1903			BTFSC	STATUS, Z
$00EB	$0A95			INCF	_pulse_u_100_i_L0+1, 1
;D-91_PIC16_color_changer_v-4.1.c,120 :: 		}
$00EC	$28D0			GOTO	L__pulse_u_100_9
$00ED	$	L__pulse_u_100_10:
;D-91_PIC16_color_changer_v-4.1.c,122 :: 		}
$00ED	$0008			RETURN
$0064	$	__read_Reader:
;D-91_PIC16_color_changer_v-4.1.c,420 :: 		_read_Reader() {
;D-91_PIC16_color_changer_v-4.1.c,427 :: 		RESET_TMR;
$0064	$1303			BCF	STATUS, RP1
$0065	$1283			BCF	STATUS, RP0
$0066	$0181			CLRF	TMR0, 1
;D-91_PIC16_color_changer_v-4.1.c,437 :: 		_while_PORTB_0x01(0);
$0067	$0192			CLRF	FARG__while_PORTB_0x01+0
$0068	$0193			CLRF	FARG__while_PORTB_0x01+1
$0069	$212D			CALL	__while_PORTB_0x01
;D-91_PIC16_color_changer_v-4.1.c,448 :: 		result = _judge_TMR_(156, 196);
$006A	$309C			MOVLW	156
$006B	$1303			BCF	STATUS, RP1
$006C	$1283			BCF	STATUS, RP0
$006D	$0092			MOVWF	FARG__judge_TMR_+0
$006E	$0193			CLRF	FARG__judge_TMR_+1
$006F	$30C4			MOVLW	196
$0070	$0094			MOVWF	FARG__judge_TMR_+2
$0071	$0195			CLRF	FARG__judge_TMR_+3
$0072	$209B			CALL	__judge_TMR_
$0073	$0840			MOVF	STACK_0, 0
$0074	$008C			MOVWF	_result
;D-91_PIC16_color_changer_v-4.1.c,450 :: 		if (result == false) {
$0075	$0840			MOVF	STACK_0, 0
$0076	$3A00			XORLW	0
$0077	$1D03			BTFSS	STATUS, Z
$0078	$287C			GOTO	L__read_Reader_35
;D-91_PIC16_color_changer_v-4.1.c,454 :: 		return false;
$0079	$01C0			CLRF	STACK_0
$007A	$01C1			CLRF	STACK_0+1
$007B	$0008			RETURN
;D-91_PIC16_color_changer_v-4.1.c,456 :: 		}
$007C	$	L__read_Reader_35:
;D-91_PIC16_color_changer_v-4.1.c,468 :: 		RESET_TMR;
$007C	$0181			CLRF	TMR0, 1
;D-91_PIC16_color_changer_v-4.1.c,475 :: 		_while_PORTB_0x01(1);
$007D	$3001			MOVLW	1
$007E	$0092			MOVWF	FARG__while_PORTB_0x01+0
$007F	$3000			MOVLW	0
$0080	$0093			MOVWF	FARG__while_PORTB_0x01+1
$0081	$212D			CALL	__while_PORTB_0x01
;D-91_PIC16_color_changer_v-4.1.c,482 :: 		result = _judge_TMR_(68, 108);
$0082	$3044			MOVLW	68
$0083	$1303			BCF	STATUS, RP1
$0084	$1283			BCF	STATUS, RP0
$0085	$0092			MOVWF	FARG__judge_TMR_+0
$0086	$3000			MOVLW	0
$0087	$0093			MOVWF	FARG__judge_TMR_+1
$0088	$306C			MOVLW	108
$0089	$0094			MOVWF	FARG__judge_TMR_+2
$008A	$3000			MOVLW	0
$008B	$0095			MOVWF	FARG__judge_TMR_+3
$008C	$209B			CALL	__judge_TMR_
$008D	$0840			MOVF	STACK_0, 0
$008E	$008C			MOVWF	_result
;D-91_PIC16_color_changer_v-4.1.c,484 :: 		if (result == false) {
$008F	$0840			MOVF	STACK_0, 0
$0090	$3A00			XORLW	0
$0091	$1D03			BTFSS	STATUS, Z
$0092	$2896			GOTO	L__read_Reader_36
;D-91_PIC16_color_changer_v-4.1.c,488 :: 		return false;
$0093	$01C0			CLRF	STACK_0
$0094	$01C1			CLRF	STACK_0+1
$0095	$0008			RETURN
;D-91_PIC16_color_changer_v-4.1.c,490 :: 		}
$0096	$	L__read_Reader_36:
;D-91_PIC16_color_changer_v-4.1.c,497 :: 		return true;
$0096	$3001			MOVLW	1
$0097	$00C0			MOVWF	STACK_0
$0098	$3000			MOVLW	0
$0099	$00C1			MOVWF	STACK_0+1
;D-91_PIC16_color_changer_v-4.1.c,499 :: 		}//_read_Reader
$009A	$0008			RETURN
$0146	$	__response:
;D-91_PIC16_color_changer_v-4.1.c,210 :: 		void _response(void)
;D-91_PIC16_color_changer_v-4.1.c,213 :: 		_pulse_u_100(5);
$0146	$3005			MOVLW	5
$0147	$1303			BCF	STATUS, RP1
$0148	$1283			BCF	STATUS, RP0
$0149	$0092			MOVWF	FARG__pulse_u_100+0
$014A	$3000			MOVLW	0
$014B	$0093			MOVWF	FARG__pulse_u_100+1
$014C	$20CC			CALL	__pulse_u_100
;D-91_PIC16_color_changer_v-4.1.c,257 :: 		}
$014D	$0008			RETURN
$0004	$	_interrupt:
$0004	$00CF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$0090			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$008F			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$0091			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0840			MOVF	STACK_0, 0
$000E	$009A			MOVWF	STSAVED_0
;D-91_PIC16_color_changer_v-4.1.c,310 :: 		void interrupt(void)
;D-91_PIC16_color_changer_v-4.1.c,321 :: 		INTCON &= 0x7F;  // interrupt => forbidden
$000F	$307F			MOVLW	127
$0010	$058B			ANDWF	INTCON, 1
;D-91_PIC16_color_changer_v-4.1.c,322 :: 		INTCON &= 0xEF;  // INT interrupt => forbidden
$0011	$30EF			MOVLW	239
$0012	$058B			ANDWF	INTCON, 1
;D-91_PIC16_color_changer_v-4.1.c,323 :: 		INTCON &= 0xFD;  // INT interrupt flag => cleared
$0013	$30FD			MOVLW	253
$0014	$058B			ANDWF	INTCON, 1
;D-91_PIC16_color_changer_v-4.1.c,330 :: 		PORTA = 0x00;
$0015	$0185			CLRF	PORTA, 1
;D-91_PIC16_color_changer_v-4.1.c,337 :: 		result = _read_Reader();
$0016	$2064			CALL	__read_Reader
$0017	$0840			MOVF	STACK_0, 0
$0018	$008C			MOVWF	_result
;D-91_PIC16_color_changer_v-4.1.c,344 :: 		if (result == false) {
$0019	$0840			MOVF	STACK_0, 0
$001A	$3A00			XORLW	0
$001B	$1D03			BTFSS	STATUS, Z
$001C	$281E			GOTO	L_interrupt_32
;D-91_PIC16_color_changer_v-4.1.c,348 :: 		return;
$001D	$2821			GOTO	L_Interrupt_end
;D-91_PIC16_color_changer_v-4.1.c,350 :: 		}
$001E	$	L_interrupt_32:
;D-91_PIC16_color_changer_v-4.1.c,367 :: 		_response();
$001E	$2146			CALL	__response
;D-91_PIC16_color_changer_v-4.1.c,375 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$001F	$160B			BSF	INTCON, 4
;D-91_PIC16_color_changer_v-4.1.c,376 :: 		INTCON |= 0x80;
$0020	$178B			BSF	INTCON, 7
;D-91_PIC16_color_changer_v-4.1.c,378 :: 		}//void interrupt(void)
$0021	$	L_Interrupt_end:
$0021	$081A			MOVF	STSAVED_0, 0
$0022	$00C0			MOVWF	STACK_0
$0023	$0811			MOVF	?savePCLATH, 0
$0024	$008A			MOVWF	PCLATH
$0025	$080F			MOVF	?saveFSR, 0
$0026	$0084			MOVWF	FSR
$0027	$0E10			SWAPF	?saveSTATUS, 0
$0028	$0083			MOVWF	STATUS
$0029	$0ECF			SWAPF	STACK_15, 1
$002A	$0E4F			SWAPF	STACK_15, 0
$002B	$0009			RETFIE
$010E	$	__main_Setup:
;D-91_PIC16_color_changer_v-4.1.c,545 :: 		_main_Setup() {
;D-91_PIC16_color_changer_v-4.1.c,548 :: 		TRISA     = 0x00;
$010E	$1303			BCF	STATUS, RP1
$010F	$1683			BSF	STATUS, RP0
$0110	$0185			CLRF	TRISA, 1
;D-91_PIC16_color_changer_v-4.1.c,549 :: 		PORTA     = 0x00;		//0000 0010
$0111	$1283			BCF	STATUS, RP0
$0112	$0185			CLRF	PORTA, 1
;D-91_PIC16_color_changer_v-4.1.c,551 :: 		TRISB     = 0xFF;		// Input: RB0 ~ RB7
$0113	$30FF			MOVLW	255
$0114	$1683			BSF	STATUS, RP0
$0115	$0086			MOVWF	TRISB
;D-91_PIC16_color_changer_v-4.1.c,553 :: 		OPTION_REG &= 0x7F;	// Pull-up => on
$0116	$307F			MOVLW	127
$0117	$0501			ANDWF	OPTION_REG, 0
$0118	$00C0			MOVWF	STACK_0
$0119	$0840			MOVF	STACK_0, 0
$011A	$0081			MOVWF	OPTION_REG
;D-91_PIC16_color_changer_v-4.1.c,555 :: 		OPTION_REG &= 0xBF;	// INT interrupt => by 5V ~> 0V
$011B	$30BF			MOVLW	191
$011C	$05C0			ANDWF	STACK_0, 1
$011D	$0840			MOVF	STACK_0, 0
$011E	$0081			MOVWF	OPTION_REG
;D-91_PIC16_color_changer_v-4.1.c,557 :: 		OPTION_REG &= 0xDF;	// Timer by clock
$011F	$30DF			MOVLW	223
$0120	$05C0			ANDWF	STACK_0, 1
$0121	$0840			MOVF	STACK_0, 0
$0122	$0081			MOVWF	OPTION_REG
;D-91_PIC16_color_changer_v-4.1.c,558 :: 		OPTION_REG &= 0xF0;	// Prescaler => on
$0123	$30F0			MOVLW	240
$0124	$05C0			ANDWF	STACK_0, 1
$0125	$0840			MOVF	STACK_0, 0
$0126	$0081			MOVWF	OPTION_REG
;D-91_PIC16_color_changer_v-4.1.c,559 :: 		OPTION_REG |= 0x07; // Prescaler => 1/256
$0127	$3007			MOVLW	7
$0128	$0440			IORWF	STACK_0, 0
$0129	$0081			MOVWF	OPTION_REG
;D-91_PIC16_color_changer_v-4.1.c,566 :: 		bit_len = 4;
$012A	$3004			MOVLW	4
$012B	$008D			MOVWF	_bit_len
;D-91_PIC16_color_changer_v-4.1.c,568 :: 		}//_main_Setup
$012C	$0008			RETURN
$0153	$	GlobalIniD-91_PIC16_color_changer_v-4:
$0153	$3001			MOVLW	1
$0154	$1303			BCF	STATUS, RP1
$0155	$1283			BCF	STATUS, RP0
$0156	$008E			MOVWF	_LED_FLAG+0
$0157	$0008			RETURN
$014E	$	_main:
;D-91_PIC16_color_changer_v-4.1.c,381 :: 		void main(void)
;D-91_PIC16_color_changer_v-4.1.c,384 :: 		_main_Setup();
$014E	$210E			CALL	__main_Setup
;D-91_PIC16_color_changer_v-4.1.c,406 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$014F	$160B			BSF	INTCON, 4
;D-91_PIC16_color_changer_v-4.1.c,407 :: 		INTCON |= 0x80;
$0150	$178B			BSF	INTCON, 7
;D-91_PIC16_color_changer_v-4.1.c,409 :: 		while(1)
$0151	$	L_main_33:
$0151	$2951			GOTO	L_main_33
;D-91_PIC16_color_changer_v-4.1.c,417 :: 		}//void main(void)
$0152	$2952			GOTO	$
