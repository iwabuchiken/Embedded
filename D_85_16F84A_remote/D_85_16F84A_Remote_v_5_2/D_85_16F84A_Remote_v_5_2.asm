;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 2014/07/16 21:01:54
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$28B4			GOTO	_main
$004B	$	__pulse:
;D_85_16F84A_Remote_v_5_2.c,19 :: 		void _pulse(int num)
;D_85_16F84A_Remote_v_5_2.c,23 :: 		for(i = 0; i < num; i++)
$004B	$1303			BCF	STATUS, RP1
$004C	$1283			BCF	STATUS, RP0
$004D	$0196			CLRF	_pulse_i_L0
$004E	$0197			CLRF	_pulse_i_L0+1
$004F	$	L__pulse_0:
$004F	$3080			MOVLW	128
$0050	$0617			XORWF	_pulse_i_L0+1, 0
$0051	$00C0			MOVWF	STACK_0
$0052	$3080			MOVLW	128
$0053	$0615			XORWF	FARG__pulse+1, 0
$0054	$0240			SUBWF	STACK_0, 0
$0055	$1D03			BTFSS	STATUS, Z
$0056	$2859			GOTO	L__pulse_15
$0057	$0814			MOVF	FARG__pulse+0, 0
$0058	$0216			SUBWF	_pulse_i_L0, 0
$0059	$	L__pulse_15:
$0059	$1803			BTFSC	STATUS, C
$005A	$2882			GOTO	L__pulse_1
;D_85_16F84A_Remote_v_5_2.c,26 :: 		PORTA = 0x01; Delay_ms(1);
$005B	$3001			MOVLW	1
$005C	$0085			MOVWF	PORTA
$005D	$3007			MOVLW	7
$005E	$00CB			MOVWF	STACK_11
$005F	$30FF			MOVLW	255
$0060	$00CA			MOVWF	STACK_10
$0061	$0BCB			DECFSZ	STACK_11, F
$0062	$2864			GOTO	$+2
$0063	$2867			GOTO	$+4
$0064	$0BCA			DECFSZ	STACK_10, F
$0065	$2864			GOTO	$-1
$0066	$2861			GOTO	$-5
$0067	$3078			MOVLW	120
$0068	$00CA			MOVWF	STACK_10
$0069	$0BCA			DECFSZ	STACK_10, F
$006A	$2869			GOTO	$-1
$006B	$0000			NOP
$006C	$0000			NOP
;D_85_16F84A_Remote_v_5_2.c,28 :: 		PORTA = 0x00; Delay_ms(1);
$006D	$0185			CLRF	PORTA, 1
$006E	$3007			MOVLW	7
$006F	$00CB			MOVWF	STACK_11
$0070	$30FF			MOVLW	255
$0071	$00CA			MOVWF	STACK_10
$0072	$0BCB			DECFSZ	STACK_11, F
$0073	$2875			GOTO	$+2
$0074	$2878			GOTO	$+4
$0075	$0BCA			DECFSZ	STACK_10, F
$0076	$2875			GOTO	$-1
$0077	$2872			GOTO	$-5
$0078	$3078			MOVLW	120
$0079	$00CA			MOVWF	STACK_10
$007A	$0BCA			DECFSZ	STACK_10, F
$007B	$287A			GOTO	$-1
$007C	$0000			NOP
$007D	$0000			NOP
;D_85_16F84A_Remote_v_5_2.c,30 :: 		}
$007E	$	L__pulse_2:
;D_85_16F84A_Remote_v_5_2.c,23 :: 		for(i = 0; i < num; i++)
$007E	$0A96			INCF	_pulse_i_L0, 1
$007F	$1903			BTFSC	STATUS, Z
$0080	$0A97			INCF	_pulse_i_L0+1, 1
;D_85_16F84A_Remote_v_5_2.c,30 :: 		}
$0081	$284F			GOTO	L__pulse_0
$0082	$	L__pulse_1:
;D_85_16F84A_Remote_v_5_2.c,32 :: 		}
$0082	$0008			RETURN
$00D4	$	_Mul_8x8_U:
$00D4	$1303			BCF	STATUS, RP1
$00D5	$1283			BCF	STATUS, RP0
$00D6	$0840			MOVF	STACK_0, W
$00D7	$00C1			MOVWF	STACK_1
$00D8	$01C0			CLRF	STACK_0
$00D9	$3008			MOVLW	8
$00DA	$00CC			MOVWF	STACK_12
$00DB	$0841			MOVF	STACK_1, W
$00DC	$0CC4			RRF	STACK_4, F
$00DD	$1803			BTFSC	STATUS, C
$00DE	$28E3			GOTO	$+5
$00DF	$0BCC			DECFSZ	STACK_12, F
$00E0	$28DC			GOTO	$-4
$00E1	$01C1			CLRF	STACK_1, F
$00E2	$3400			RETLW	0
$00E3	$1003			BCF	STATUS, C
$00E4	$28E8			GOTO	$+4
$00E5	$0CC4			RRF	STACK_4, F
$00E6	$1803			BTFSC	STATUS, C
$00E7	$07C1			ADDWF	STACK_1, F
$00E8	$0CC1			RRF	STACK_1, F
$00E9	$0CC0			RRF	STACK_0, F
$00EA	$0BCC			DECFSZ	STACK_12, F
$00EB	$28E5			GOTO	$-6
$00EC	$0008			RETURN
$00ED	$	__while_PORTB_0x01:
;D_85_16F84A_Remote_v_5_2.c,34 :: 		void _while_PORTB_0x01(int num)
;D_85_16F84A_Remote_v_5_2.c,37 :: 		while((PORTB & 0x01) == num) //---------------------
$00ED	$	L__while_PORTB_0x01_3:
$00ED	$3001			MOVLW	1
$00EE	$1303			BCF	STATUS, RP1
$00EF	$1283			BCF	STATUS, RP0
$00F0	$0506			ANDWF	PORTB, 0
$00F1	$00C1			MOVWF	STACK_1
$00F2	$3000			MOVLW	0
$00F3	$0611			XORWF	FARG__while_PORTB_0x01+1, 0
$00F4	$1D03			BTFSS	STATUS, Z
$00F5	$28F8			GOTO	L__while_PORTB_0x01_16
$00F6	$0810			MOVF	FARG__while_PORTB_0x01+0, 0
$00F7	$0641			XORWF	STACK_1, 0
$00F8	$	L__while_PORTB_0x01_16:
$00F8	$1D03			BTFSS	STATUS, Z
$00F9	$2905			GOTO	L__while_PORTB_0x01_4
;D_85_16F84A_Remote_v_5_2.c,40 :: 		if(TMR0 == 255)
$00FA	$0801			MOVF	TMR0, 0
$00FB	$3AFF			XORLW	255
$00FC	$1D03			BTFSS	STATUS, Z
$00FD	$2904			GOTO	L__while_PORTB_0x01_5
;D_85_16F84A_Remote_v_5_2.c,44 :: 		_pulse(3);
$00FE	$3003			MOVLW	3
$00FF	$0094			MOVWF	FARG__pulse+0
$0100	$3000			MOVLW	0
$0101	$0095			MOVWF	FARG__pulse+1
$0102	$204B			CALL	__pulse
;D_85_16F84A_Remote_v_5_2.c,47 :: 		return;
$0103	$0008			RETURN
;D_85_16F84A_Remote_v_5_2.c,49 :: 		}
$0104	$	L__while_PORTB_0x01_5:
;D_85_16F84A_Remote_v_5_2.c,51 :: 		}//while((PORTB & 0x01) == 0)
$0104	$28ED			GOTO	L__while_PORTB_0x01_3
$0105	$	L__while_PORTB_0x01_4:
;D_85_16F84A_Remote_v_5_2.c,53 :: 		return;
;D_85_16F84A_Remote_v_5_2.c,55 :: 		}
$0105	$0008			RETURN
$0083	$	__judge_TMR_:
;D_85_16F84A_Remote_v_5_2.c,61 :: 		int _judge_TMR_(int low, int high) {
;D_85_16F84A_Remote_v_5_2.c,63 :: 		if(TMR0 < low) //---------------------
$0083	$3080			MOVLW	128
$0084	$1303			BCF	STATUS, RP1
$0085	$1283			BCF	STATUS, RP0
$0086	$00C0			MOVWF	STACK_0
$0087	$3080			MOVLW	128
$0088	$0611			XORWF	FARG__judge_TMR_+1, 0
$0089	$0240			SUBWF	STACK_0, 0
$008A	$1D03			BTFSS	STATUS, Z
$008B	$288E			GOTO	L__judge_TMR__17
$008C	$0810			MOVF	FARG__judge_TMR_+0, 0
$008D	$0201			SUBWF	TMR0, 0
$008E	$	L__judge_TMR__17:
$008E	$1803			BTFSC	STATUS, C
$008F	$289A			GOTO	L__judge_TMR__6
;D_85_16F84A_Remote_v_5_2.c,66 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$0090	$160B			BSF	INTCON, 4
;D_85_16F84A_Remote_v_5_2.c,67 :: 		INTCON |= 0x80;        // interrupt => permitted
$0091	$178B			BSF	INTCON, 7
;D_85_16F84A_Remote_v_5_2.c,74 :: 		_pulse(1);
$0092	$3001			MOVLW	1
$0093	$0094			MOVWF	FARG__pulse+0
$0094	$3000			MOVLW	0
$0095	$0095			MOVWF	FARG__pulse+1
$0096	$204B			CALL	__pulse
;D_85_16F84A_Remote_v_5_2.c,76 :: 		return false;                // return
$0097	$01C0			CLRF	STACK_0
$0098	$01C1			CLRF	STACK_0+1
$0099	$0008			RETURN
;D_85_16F84A_Remote_v_5_2.c,87 :: 		} else if (TMR0 > high) {
$009A	$	L__judge_TMR__6:
$009A	$3080			MOVLW	128
$009B	$0613			XORWF	FARG__judge_TMR_+3, 0
$009C	$00C0			MOVWF	STACK_0
$009D	$3080			MOVLW	128
$009E	$0240			SUBWF	STACK_0, 0
$009F	$1D03			BTFSS	STATUS, Z
$00A0	$28A3			GOTO	L__judge_TMR__18
$00A1	$0801			MOVF	TMR0, 0
$00A2	$0212			SUBWF	FARG__judge_TMR_+2, 0
$00A3	$	L__judge_TMR__18:
$00A3	$1803			BTFSC	STATUS, C
$00A4	$28AF			GOTO	L__judge_TMR__8
;D_85_16F84A_Remote_v_5_2.c,89 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$00A5	$160B			BSF	INTCON, 4
;D_85_16F84A_Remote_v_5_2.c,90 :: 		INTCON |= 0x80;        // interrupt => permitted
$00A6	$178B			BSF	INTCON, 7
;D_85_16F84A_Remote_v_5_2.c,93 :: 		_pulse(2);
$00A7	$3002			MOVLW	2
$00A8	$0094			MOVWF	FARG__pulse+0
$00A9	$3000			MOVLW	0
$00AA	$0095			MOVWF	FARG__pulse+1
$00AB	$204B			CALL	__pulse
;D_85_16F84A_Remote_v_5_2.c,95 :: 		return false;
$00AC	$01C0			CLRF	STACK_0
$00AD	$01C1			CLRF	STACK_0+1
$00AE	$0008			RETURN
;D_85_16F84A_Remote_v_5_2.c,97 :: 		}
$00AF	$	L__judge_TMR__8:
$00AF	$	L__judge_TMR__7:
;D_85_16F84A_Remote_v_5_2.c,99 :: 		return true;
$00AF	$3001			MOVLW	1
$00B0	$00C0			MOVWF	STACK_0
$00B1	$3000			MOVLW	0
$00B2	$00C1			MOVWF	STACK_0+1
;D_85_16F84A_Remote_v_5_2.c,101 :: 		}//int _judge_TMR_(int low, int high)
$00B3	$0008			RETURN
$0106	$	__response:
;D_85_16F84A_Remote_v_5_2.c,103 :: 		void _response(void)
;D_85_16F84A_Remote_v_5_2.c,108 :: 		if(LED_FLAG == 1)
$0106	$1303			BCF	STATUS, RP1
$0107	$1283			BCF	STATUS, RP0
$0108	$080C			MOVF	_LED_FLAG, 0
$0109	$3A01			XORLW	1
$010A	$1D03			BTFSS	STATUS, Z
$010B	$2916			GOTO	L__response_9
;D_85_16F84A_Remote_v_5_2.c,111 :: 		PORTA = 0x01;
$010C	$3001			MOVLW	1
$010D	$0085			MOVWF	PORTA
;D_85_16F84A_Remote_v_5_2.c,113 :: 		LED_FLAG *= -1;
$010E	$080C			MOVF	_LED_FLAG, 0
$010F	$00C0			MOVWF	STACK_0
$0110	$30FF			MOVLW	255
$0111	$00C4			MOVWF	STACK_4
$0112	$20D4			CALL	_mul_8x8_u
$0113	$0840			MOVF	STACK_0, 0
$0114	$008C			MOVWF	_LED_FLAG
;D_85_16F84A_Remote_v_5_2.c,115 :: 		} else {
$0115	$291E			GOTO	L__response_10
$0116	$	L__response_9:
;D_85_16F84A_Remote_v_5_2.c,117 :: 		PORTA = 0x00;
$0116	$0185			CLRF	PORTA, 1
;D_85_16F84A_Remote_v_5_2.c,119 :: 		LED_FLAG *= -1;
$0117	$080C			MOVF	_LED_FLAG, 0
$0118	$00C0			MOVWF	STACK_0
$0119	$30FF			MOVLW	255
$011A	$00C4			MOVWF	STACK_4
$011B	$20D4			CALL	_mul_8x8_u
$011C	$0840			MOVF	STACK_0, 0
$011D	$008C			MOVWF	_LED_FLAG
;D_85_16F84A_Remote_v_5_2.c,121 :: 		}//if(LED_FLAG == 1)
$011E	$	L__response_10:
;D_85_16F84A_Remote_v_5_2.c,123 :: 		}
$011E	$0008			RETURN
$0004	$	_interrupt:
$0004	$00CF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$008E			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$008D			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$008F			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0840			MOVF	STACK_0, 0
$000E	$0098			MOVWF	STSAVED_0
;D_85_16F84A_Remote_v_5_2.c,125 :: 		void interrupt(void)
;D_85_16F84A_Remote_v_5_2.c,136 :: 		INTCON &= 0x7F;  // interrupt => forbidden
$000F	$307F			MOVLW	127
$0010	$058B			ANDWF	INTCON, 1
;D_85_16F84A_Remote_v_5_2.c,137 :: 		INTCON &= 0xEF;  // INT interrupt => forbidden
$0011	$30EF			MOVLW	239
$0012	$058B			ANDWF	INTCON, 1
;D_85_16F84A_Remote_v_5_2.c,138 :: 		INTCON &= 0xFD;  // INT interrupt flag => cleared
$0013	$30FD			MOVLW	253
$0014	$058B			ANDWF	INTCON, 1
;D_85_16F84A_Remote_v_5_2.c,151 :: 		TMR0 = 0;
$0015	$0181			CLRF	TMR0, 1
;D_85_16F84A_Remote_v_5_2.c,161 :: 		_while_PORTB_0x01(0);
$0016	$0190			CLRF	FARG__while_PORTB_0x01+0
$0017	$0191			CLRF	FARG__while_PORTB_0x01+1
$0018	$20ED			CALL	__while_PORTB_0x01
;D_85_16F84A_Remote_v_5_2.c,172 :: 		result = _judge_TMR_(156, 196);
$0019	$309C			MOVLW	156
$001A	$1303			BCF	STATUS, RP1
$001B	$1283			BCF	STATUS, RP0
$001C	$0090			MOVWF	FARG__judge_TMR_+0
$001D	$0191			CLRF	FARG__judge_TMR_+1
$001E	$30C4			MOVLW	196
$001F	$0092			MOVWF	FARG__judge_TMR_+2
$0020	$0193			CLRF	FARG__judge_TMR_+3
$0021	$2083			CALL	__judge_TMR_
;D_85_16F84A_Remote_v_5_2.c,174 :: 		if (result == false) {
$0022	$0840			MOVF	STACK_0, 0
$0023	$3A00			XORLW	0
$0024	$1D03			BTFSS	STATUS, Z
$0025	$2827			GOTO	L_interrupt_11
;D_85_16F84A_Remote_v_5_2.c,178 :: 		return;
$0026	$2840			GOTO	L_Interrupt_end
;D_85_16F84A_Remote_v_5_2.c,180 :: 		}
$0027	$	L_interrupt_11:
;D_85_16F84A_Remote_v_5_2.c,192 :: 		TMR0 = 0;
$0027	$0181			CLRF	TMR0, 1
;D_85_16F84A_Remote_v_5_2.c,199 :: 		_while_PORTB_0x01(1);
$0028	$3001			MOVLW	1
$0029	$0090			MOVWF	FARG__while_PORTB_0x01+0
$002A	$3000			MOVLW	0
$002B	$0091			MOVWF	FARG__while_PORTB_0x01+1
$002C	$20ED			CALL	__while_PORTB_0x01
;D_85_16F84A_Remote_v_5_2.c,206 :: 		result = _judge_TMR_(68, 108);
$002D	$3044			MOVLW	68
$002E	$1303			BCF	STATUS, RP1
$002F	$1283			BCF	STATUS, RP0
$0030	$0090			MOVWF	FARG__judge_TMR_+0
$0031	$3000			MOVLW	0
$0032	$0091			MOVWF	FARG__judge_TMR_+1
$0033	$306C			MOVLW	108
$0034	$0092			MOVWF	FARG__judge_TMR_+2
$0035	$3000			MOVLW	0
$0036	$0093			MOVWF	FARG__judge_TMR_+3
$0037	$2083			CALL	__judge_TMR_
;D_85_16F84A_Remote_v_5_2.c,208 :: 		if (result == false) {
$0038	$0840			MOVF	STACK_0, 0
$0039	$3A00			XORLW	0
$003A	$1D03			BTFSS	STATUS, Z
$003B	$283D			GOTO	L_interrupt_12
;D_85_16F84A_Remote_v_5_2.c,212 :: 		return;
$003C	$2840			GOTO	L_Interrupt_end
;D_85_16F84A_Remote_v_5_2.c,214 :: 		}
$003D	$	L_interrupt_12:
;D_85_16F84A_Remote_v_5_2.c,221 :: 		_response();
$003D	$2106			CALL	__response
;D_85_16F84A_Remote_v_5_2.c,229 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$003E	$160B			BSF	INTCON, 4
;D_85_16F84A_Remote_v_5_2.c,230 :: 		INTCON |= 0x80;
$003F	$178B			BSF	INTCON, 7
;D_85_16F84A_Remote_v_5_2.c,232 :: 		}//void interrupt(void)
$0040	$	L_Interrupt_end:
$0040	$0818			MOVF	STSAVED_0, 0
$0041	$00C0			MOVWF	STACK_0
$0042	$080F			MOVF	?savePCLATH, 0
$0043	$008A			MOVWF	PCLATH
$0044	$080D			MOVF	?saveFSR, 0
$0045	$0084			MOVWF	FSR
$0046	$0E0E			SWAPF	?saveSTATUS, 0
$0047	$0083			MOVWF	STATUS
$0048	$0ECF			SWAPF	STACK_15, 1
$0049	$0E4F			SWAPF	STACK_15, 0
$004A	$0009			RETFIE
$011F	$	GlobalIniD_85_16F84A_Remote_v_5_2:
$011F	$3001			MOVLW	1
$0120	$1303			BCF	STATUS, RP1
$0121	$1283			BCF	STATUS, RP0
$0122	$008C			MOVWF	_LED_FLAG+0
$0123	$0008			RETURN
$00B4	$	_main:
;D_85_16F84A_Remote_v_5_2.c,235 :: 		void main(void)
;D_85_16F84A_Remote_v_5_2.c,239 :: 		TRISA     = 0x00;
$00B4	$211F			CALL	GlobalIniD_85_16F84A_Remote_v_5_2
$00B5	$1683			BSF	STATUS, RP0
$00B6	$0185			CLRF	TRISA, 1
;D_85_16F84A_Remote_v_5_2.c,240 :: 		PORTA     = 0x00;		//0000 0010
$00B7	$1283			BCF	STATUS, RP0
$00B8	$0185			CLRF	PORTA, 1
;D_85_16F84A_Remote_v_5_2.c,242 :: 		TRISB     = 0xFF;		// Input: RB0 ~ RB7
$00B9	$30FF			MOVLW	255
$00BA	$1683			BSF	STATUS, RP0
$00BB	$0086			MOVWF	TRISB
;D_85_16F84A_Remote_v_5_2.c,244 :: 		OPTION_REG &= 0x7F;	// Pull-up => on
$00BC	$307F			MOVLW	127
$00BD	$0501			ANDWF	OPTION_REG, 0
$00BE	$00C0			MOVWF	STACK_0
$00BF	$0840			MOVF	STACK_0, 0
$00C0	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_5_2.c,245 :: 		OPTION_REG &= 0xBF;	// INT interrupt => by 5V ~> 0V
$00C1	$30BF			MOVLW	191
$00C2	$05C0			ANDWF	STACK_0, 1
$00C3	$0840			MOVF	STACK_0, 0
$00C4	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_5_2.c,247 :: 		OPTION_REG &= 0xDF;	// Timer by clock
$00C5	$30DF			MOVLW	223
$00C6	$05C0			ANDWF	STACK_0, 1
$00C7	$0840			MOVF	STACK_0, 0
$00C8	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_5_2.c,248 :: 		OPTION_REG &= 0xF0;	// Prescaler => on
$00C9	$30F0			MOVLW	240
$00CA	$05C0			ANDWF	STACK_0, 1
$00CB	$0840			MOVF	STACK_0, 0
$00CC	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_5_2.c,249 :: 		OPTION_REG |= 0x07; // Prescaler => 1/256
$00CD	$3007			MOVLW	7
$00CE	$0440			IORWF	STACK_0, 0
$00CF	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_5_2.c,257 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$00D0	$160B			BSF	INTCON, 4
;D_85_16F84A_Remote_v_5_2.c,258 :: 		INTCON |= 0x80;
$00D1	$178B			BSF	INTCON, 7
;D_85_16F84A_Remote_v_5_2.c,260 :: 		while(1)
$00D2	$	L_main_13:
$00D2	$28D2			GOTO	L_main_13
;D_85_16F84A_Remote_v_5_2.c,268 :: 		}//void main(void)
$00D3	$28D3			GOTO	$
