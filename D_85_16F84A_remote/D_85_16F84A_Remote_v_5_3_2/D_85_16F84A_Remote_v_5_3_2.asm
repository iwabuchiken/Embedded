;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 2014/07/22 20:37:29
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2935			GOTO	_main
$0096	$	__pulse:
;D_85_16F84A_Remote_v_5_3_2.c,30 :: 		void _pulse(int num)
;D_85_16F84A_Remote_v_5_3_2.c,34 :: 		for(i = 0; i < num; i++)
$0096	$1303			BCF	STATUS, RP1
$0097	$1283			BCF	STATUS, RP0
$0098	$0199			CLRF	_pulse_i_L0
$0099	$019A			CLRF	_pulse_i_L0+1
$009A	$	L__pulse_0:
$009A	$3080			MOVLW	128
$009B	$061A			XORWF	_pulse_i_L0+1, 0
$009C	$00C0			MOVWF	STACK_0
$009D	$3080			MOVLW	128
$009E	$0618			XORWF	FARG__pulse+1, 0
$009F	$0240			SUBWF	STACK_0, 0
$00A0	$1D03			BTFSS	STATUS, Z
$00A1	$28A4			GOTO	L__pulse_29
$00A2	$0817			MOVF	FARG__pulse+0, 0
$00A3	$0219			SUBWF	_pulse_i_L0, 0
$00A4	$	L__pulse_29:
$00A4	$1803			BTFSC	STATUS, C
$00A5	$28CD			GOTO	L__pulse_1
;D_85_16F84A_Remote_v_5_3_2.c,37 :: 		PORTA = 0x01; Delay_ms(1);
$00A6	$3001			MOVLW	1
$00A7	$0085			MOVWF	PORTA
$00A8	$3007			MOVLW	7
$00A9	$00CB			MOVWF	STACK_11
$00AA	$30FF			MOVLW	255
$00AB	$00CA			MOVWF	STACK_10
$00AC	$0BCB			DECFSZ	STACK_11, F
$00AD	$28AF			GOTO	$+2
$00AE	$28B2			GOTO	$+4
$00AF	$0BCA			DECFSZ	STACK_10, F
$00B0	$28AF			GOTO	$-1
$00B1	$28AC			GOTO	$-5
$00B2	$3078			MOVLW	120
$00B3	$00CA			MOVWF	STACK_10
$00B4	$0BCA			DECFSZ	STACK_10, F
$00B5	$28B4			GOTO	$-1
$00B6	$0000			NOP
$00B7	$0000			NOP
;D_85_16F84A_Remote_v_5_3_2.c,39 :: 		PORTA = 0x00; Delay_ms(1);
$00B8	$0185			CLRF	PORTA, 1
$00B9	$3007			MOVLW	7
$00BA	$00CB			MOVWF	STACK_11
$00BB	$30FF			MOVLW	255
$00BC	$00CA			MOVWF	STACK_10
$00BD	$0BCB			DECFSZ	STACK_11, F
$00BE	$28C0			GOTO	$+2
$00BF	$28C3			GOTO	$+4
$00C0	$0BCA			DECFSZ	STACK_10, F
$00C1	$28C0			GOTO	$-1
$00C2	$28BD			GOTO	$-5
$00C3	$3078			MOVLW	120
$00C4	$00CA			MOVWF	STACK_10
$00C5	$0BCA			DECFSZ	STACK_10, F
$00C6	$28C5			GOTO	$-1
$00C7	$0000			NOP
$00C8	$0000			NOP
;D_85_16F84A_Remote_v_5_3_2.c,41 :: 		}
$00C9	$	L__pulse_2:
;D_85_16F84A_Remote_v_5_3_2.c,34 :: 		for(i = 0; i < num; i++)
$00C9	$0A99			INCF	_pulse_i_L0, 1
$00CA	$1903			BTFSC	STATUS, Z
$00CB	$0A9A			INCF	_pulse_i_L0+1, 1
;D_85_16F84A_Remote_v_5_3_2.c,41 :: 		}
$00CC	$289A			GOTO	L__pulse_0
$00CD	$	L__pulse_1:
;D_85_16F84A_Remote_v_5_3_2.c,43 :: 		}
$00CD	$0008			RETURN
$00CE	$	__pulse_u:
;D_85_16F84A_Remote_v_5_3_2.c,45 :: 		void _pulse_u(int num)
;D_85_16F84A_Remote_v_5_3_2.c,49 :: 		for(i = 0; i < num; i++)
$00CE	$1303			BCF	STATUS, RP1
$00CF	$1283			BCF	STATUS, RP0
$00D0	$0199			CLRF	_pulse_u_i_L0
$00D1	$019A			CLRF	_pulse_u_i_L0+1
$00D2	$	L__pulse_u_3:
$00D2	$3080			MOVLW	128
$00D3	$061A			XORWF	_pulse_u_i_L0+1, 0
$00D4	$00C0			MOVWF	STACK_0
$00D5	$3080			MOVLW	128
$00D6	$0618			XORWF	FARG__pulse_u+1, 0
$00D7	$0240			SUBWF	STACK_0, 0
$00D8	$1D03			BTFSS	STATUS, Z
$00D9	$28DC			GOTO	L__pulse_u_30
$00DA	$0817			MOVF	FARG__pulse_u+0, 0
$00DB	$0219			SUBWF	_pulse_u_i_L0, 0
$00DC	$	L__pulse_u_30:
$00DC	$1803			BTFSC	STATUS, C
$00DD	$2903			GOTO	L__pulse_u_4
;D_85_16F84A_Remote_v_5_3_2.c,52 :: 		PORTA = 0x01; Delay_us(500);
$00DE	$3001			MOVLW	1
$00DF	$0085			MOVWF	PORTA
$00E0	$3004			MOVLW	4
$00E1	$00CB			MOVWF	STACK_11
$00E2	$30FF			MOVLW	255
$00E3	$00CA			MOVWF	STACK_10
$00E4	$0BCB			DECFSZ	STACK_11, F
$00E5	$28E7			GOTO	$+2
$00E6	$28EA			GOTO	$+4
$00E7	$0BCA			DECFSZ	STACK_10, F
$00E8	$28E7			GOTO	$-1
$00E9	$28E4			GOTO	$-5
$00EA	$303B			MOVLW	59
$00EB	$00CA			MOVWF	STACK_10
$00EC	$0BCA			DECFSZ	STACK_10, F
$00ED	$28EC			GOTO	$-1
$00EE	$0000			NOP
;D_85_16F84A_Remote_v_5_3_2.c,54 :: 		PORTA = 0x00; Delay_us(500);
$00EF	$0185			CLRF	PORTA, 1
$00F0	$3004			MOVLW	4
$00F1	$00CB			MOVWF	STACK_11
$00F2	$30FF			MOVLW	255
$00F3	$00CA			MOVWF	STACK_10
$00F4	$0BCB			DECFSZ	STACK_11, F
$00F5	$28F7			GOTO	$+2
$00F6	$28FA			GOTO	$+4
$00F7	$0BCA			DECFSZ	STACK_10, F
$00F8	$28F7			GOTO	$-1
$00F9	$28F4			GOTO	$-5
$00FA	$303B			MOVLW	59
$00FB	$00CA			MOVWF	STACK_10
$00FC	$0BCA			DECFSZ	STACK_10, F
$00FD	$28FC			GOTO	$-1
$00FE	$0000			NOP
;D_85_16F84A_Remote_v_5_3_2.c,56 :: 		}
$00FF	$	L__pulse_u_5:
;D_85_16F84A_Remote_v_5_3_2.c,49 :: 		for(i = 0; i < num; i++)
$00FF	$0A99			INCF	_pulse_u_i_L0, 1
$0100	$1903			BTFSC	STATUS, Z
$0101	$0A9A			INCF	_pulse_u_i_L0+1, 1
;D_85_16F84A_Remote_v_5_3_2.c,56 :: 		}
$0102	$28D2			GOTO	L__pulse_u_3
$0103	$	L__pulse_u_4:
;D_85_16F84A_Remote_v_5_3_2.c,58 :: 		}
$0103	$0008			RETURN
$0155	$	__while_PORTB_0x01:
;D_85_16F84A_Remote_v_5_3_2.c,60 :: 		void _while_PORTB_0x01(int num)
;D_85_16F84A_Remote_v_5_3_2.c,63 :: 		while((PORTB & 0x01) == num) //---------------------
$0155	$	L__while_PORTB_0x01_6:
$0155	$3001			MOVLW	1
$0156	$1303			BCF	STATUS, RP1
$0157	$1283			BCF	STATUS, RP0
$0158	$0506			ANDWF	PORTB, 0
$0159	$00C1			MOVWF	STACK_1
$015A	$3000			MOVLW	0
$015B	$0614			XORWF	FARG__while_PORTB_0x01+1, 0
$015C	$1D03			BTFSS	STATUS, Z
$015D	$2960			GOTO	L__while_PORTB_0x01_31
$015E	$0813			MOVF	FARG__while_PORTB_0x01+0, 0
$015F	$0641			XORWF	STACK_1, 0
$0160	$	L__while_PORTB_0x01_31:
$0160	$1D03			BTFSS	STATUS, Z
$0161	$296D			GOTO	L__while_PORTB_0x01_7
;D_85_16F84A_Remote_v_5_3_2.c,66 :: 		if(TMR0 == 255)
$0162	$0801			MOVF	TMR0, 0
$0163	$3AFF			XORLW	255
$0164	$1D03			BTFSS	STATUS, Z
$0165	$296C			GOTO	L__while_PORTB_0x01_8
;D_85_16F84A_Remote_v_5_3_2.c,70 :: 		_pulse(3);
$0166	$3003			MOVLW	3
$0167	$0097			MOVWF	FARG__pulse+0
$0168	$3000			MOVLW	0
$0169	$0098			MOVWF	FARG__pulse+1
$016A	$2096			CALL	__pulse
;D_85_16F84A_Remote_v_5_3_2.c,73 :: 		return;
$016B	$0008			RETURN
;D_85_16F84A_Remote_v_5_3_2.c,75 :: 		}
$016C	$	L__while_PORTB_0x01_8:
;D_85_16F84A_Remote_v_5_3_2.c,77 :: 		}//while((PORTB & 0x01) == 0)
$016C	$2955			GOTO	L__while_PORTB_0x01_6
$016D	$	L__while_PORTB_0x01_7:
;D_85_16F84A_Remote_v_5_3_2.c,79 :: 		return;
;D_85_16F84A_Remote_v_5_3_2.c,81 :: 		}
$016D	$0008			RETURN
$0104	$	__judge_TMR_:
;D_85_16F84A_Remote_v_5_3_2.c,87 :: 		int _judge_TMR_(int low, int high) {
;D_85_16F84A_Remote_v_5_3_2.c,89 :: 		if(TMR0 < low) //---------------------
$0104	$3080			MOVLW	128
$0105	$1303			BCF	STATUS, RP1
$0106	$1283			BCF	STATUS, RP0
$0107	$00C0			MOVWF	STACK_0
$0108	$3080			MOVLW	128
$0109	$0614			XORWF	FARG__judge_TMR_+1, 0
$010A	$0240			SUBWF	STACK_0, 0
$010B	$1D03			BTFSS	STATUS, Z
$010C	$290F			GOTO	L__judge_TMR__32
$010D	$0813			MOVF	FARG__judge_TMR_+0, 0
$010E	$0201			SUBWF	TMR0, 0
$010F	$	L__judge_TMR__32:
$010F	$1803			BTFSC	STATUS, C
$0110	$291B			GOTO	L__judge_TMR__9
;D_85_16F84A_Remote_v_5_3_2.c,92 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$0111	$160B			BSF	INTCON, 4
;D_85_16F84A_Remote_v_5_3_2.c,93 :: 		INTCON |= 0x80;        // interrupt => permitted
$0112	$178B			BSF	INTCON, 7
;D_85_16F84A_Remote_v_5_3_2.c,100 :: 		_pulse(1);
$0113	$3001			MOVLW	1
$0114	$0097			MOVWF	FARG__pulse+0
$0115	$3000			MOVLW	0
$0116	$0098			MOVWF	FARG__pulse+1
$0117	$2096			CALL	__pulse
;D_85_16F84A_Remote_v_5_3_2.c,102 :: 		return false;                // return
$0118	$01C0			CLRF	STACK_0
$0119	$01C1			CLRF	STACK_0+1
$011A	$0008			RETURN
;D_85_16F84A_Remote_v_5_3_2.c,113 :: 		} else if (TMR0 > high) {
$011B	$	L__judge_TMR__9:
$011B	$3080			MOVLW	128
$011C	$0616			XORWF	FARG__judge_TMR_+3, 0
$011D	$00C0			MOVWF	STACK_0
$011E	$3080			MOVLW	128
$011F	$0240			SUBWF	STACK_0, 0
$0120	$1D03			BTFSS	STATUS, Z
$0121	$2924			GOTO	L__judge_TMR__33
$0122	$0801			MOVF	TMR0, 0
$0123	$0215			SUBWF	FARG__judge_TMR_+2, 0
$0124	$	L__judge_TMR__33:
$0124	$1803			BTFSC	STATUS, C
$0125	$2930			GOTO	L__judge_TMR__11
;D_85_16F84A_Remote_v_5_3_2.c,115 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$0126	$160B			BSF	INTCON, 4
;D_85_16F84A_Remote_v_5_3_2.c,116 :: 		INTCON |= 0x80;        // interrupt => permitted
$0127	$178B			BSF	INTCON, 7
;D_85_16F84A_Remote_v_5_3_2.c,119 :: 		_pulse(2);
$0128	$3002			MOVLW	2
$0129	$0097			MOVWF	FARG__pulse+0
$012A	$3000			MOVLW	0
$012B	$0098			MOVWF	FARG__pulse+1
$012C	$2096			CALL	__pulse
;D_85_16F84A_Remote_v_5_3_2.c,121 :: 		return false;
$012D	$01C0			CLRF	STACK_0
$012E	$01C1			CLRF	STACK_0+1
$012F	$0008			RETURN
;D_85_16F84A_Remote_v_5_3_2.c,123 :: 		}
$0130	$	L__judge_TMR__11:
$0130	$	L__judge_TMR__10:
;D_85_16F84A_Remote_v_5_3_2.c,125 :: 		return true;
$0130	$3001			MOVLW	1
$0131	$00C0			MOVWF	STACK_0
$0132	$3000			MOVLW	0
$0133	$00C1			MOVWF	STACK_0+1
;D_85_16F84A_Remote_v_5_3_2.c,127 :: 		}//int _judge_TMR_(int low, int high)
$0134	$0008			RETURN
$0050	$	__custom_lower:
;D_85_16F84A_Remote_v_5_3_2.c,166 :: 		void _custom_lower(void)
;D_85_16F84A_Remote_v_5_3_2.c,169 :: 		usi bit_len = 4;
$0050	$3004			MOVLW	4
$0051	$1303			BCF	STATUS, RP1
$0052	$1283			BCF	STATUS, RP0
$0053	$0093			MOVWF	_custom_lower_bit_len_L0
;D_85_16F84A_Remote_v_5_3_2.c,171 :: 		custom_code_a = 0x00;
$0054	$018C			CLRF	_custom_code_a, 1
;D_85_16F84A_Remote_v_5_3_2.c,175 :: 		for(i = 0; i < bit_len; i++)
$0055	$018D			CLRF	_i, 1
$0056	$	L__custom_lower_14:
$0056	$0813			MOVF	_custom_lower_bit_len_L0, 0
$0057	$020D			SUBWF	_i, 0
$0058	$1803			BTFSC	STATUS, C
$0059	$2895			GOTO	L__custom_lower_15
;D_85_16F84A_Remote_v_5_3_2.c,177 :: 		RESET_TMR;
$005A	$0181			CLRF	TMR0, 1
;D_85_16F84A_Remote_v_5_3_2.c,179 :: 		while((PORTB & 0x01) == 0)
$005B	$	L__custom_lower_17:
$005B	$3001			MOVLW	1
$005C	$0506			ANDWF	PORTB, 0
$005D	$00C1			MOVWF	STACK_1
$005E	$0841			MOVF	STACK_1, 0
$005F	$3A00			XORLW	0
$0060	$1D03			BTFSS	STATUS, Z
$0061	$2867			GOTO	L__custom_lower_18
;D_85_16F84A_Remote_v_5_3_2.c,182 :: 		TIME_OUT;
$0062	$0801			MOVF	TMR0, 0
$0063	$3AFF			XORLW	255
$0064	$1903			BTFSC	STATUS, Z
$0065	$2867			GOTO	L__custom_lower_18
$0066	$	L__custom_lower_19:
;D_85_16F84A_Remote_v_5_3_2.c,184 :: 		}
$0066	$285B			GOTO	L__custom_lower_17
$0067	$	L__custom_lower_18:
;D_85_16F84A_Remote_v_5_3_2.c,186 :: 		while((PORTB & 0x01) == 1)
$0067	$	L__custom_lower_20:
$0067	$3001			MOVLW	1
$0068	$0506			ANDWF	PORTB, 0
$0069	$00C1			MOVWF	STACK_1
$006A	$0841			MOVF	STACK_1, 0
$006B	$3A01			XORLW	1
$006C	$1D03			BTFSS	STATUS, Z
$006D	$2873			GOTO	L__custom_lower_21
;D_85_16F84A_Remote_v_5_3_2.c,189 :: 		TIME_OUT;
$006E	$0801			MOVF	TMR0, 0
$006F	$3AFF			XORLW	255
$0070	$1903			BTFSC	STATUS, Z
$0071	$2873			GOTO	L__custom_lower_21
$0072	$	L__custom_lower_22:
;D_85_16F84A_Remote_v_5_3_2.c,191 :: 		}
$0072	$2867			GOTO	L__custom_lower_20
$0073	$	L__custom_lower_21:
;D_85_16F84A_Remote_v_5_3_2.c,193 :: 		if (TMR0 < 33)
$0073	$3021			MOVLW	33
$0074	$0201			SUBWF	TMR0, 0
$0075	$1803			BTFSC	STATUS, C
$0076	$2886			GOTO	L__custom_lower_23
;D_85_16F84A_Remote_v_5_3_2.c,196 :: 		custom_code_a &= ~(0x01 << i);
$0077	$080D			MOVF	_i, 0
$0078	$00C1			MOVWF	STACK_1
$0079	$3001			MOVLW	1
$007A	$00C0			MOVWF	STACK_0
$007B	$0841			MOVF	STACK_1, 0
$007C	$	L__custom_lower_34:
$007C	$1903			BTFSC	STATUS, Z
$007D	$2882			GOTO	L__custom_lower_35
$007E	$0DC0			RLF	STACK_0, 1
$007F	$1040			BCF	STACK_0, 0
$0080	$3FFF			ADDLW	255
$0081	$287C			GOTO	L__custom_lower_34
$0082	$	L__custom_lower_35:
$0082	$09C0			COMF	STACK_0, F
$0083	$0840			MOVF	STACK_0, 0
$0084	$058C			ANDWF	_custom_code_a, 1
;D_85_16F84A_Remote_v_5_3_2.c,198 :: 		}
$0085	$2893			GOTO	L__custom_lower_24
$0086	$	L__custom_lower_23:
;D_85_16F84A_Remote_v_5_3_2.c,202 :: 		custom_code_a |= (0x01 << i);
$0086	$080D			MOVF	_i, 0
$0087	$00C1			MOVWF	STACK_1
$0088	$3001			MOVLW	1
$0089	$00C0			MOVWF	STACK_0
$008A	$0841			MOVF	STACK_1, 0
$008B	$	L__custom_lower_36:
$008B	$1903			BTFSC	STATUS, Z
$008C	$2891			GOTO	L__custom_lower_37
$008D	$0DC0			RLF	STACK_0, 1
$008E	$1040			BCF	STACK_0, 0
$008F	$3FFF			ADDLW	255
$0090	$288B			GOTO	L__custom_lower_36
$0091	$	L__custom_lower_37:
$0091	$0840			MOVF	STACK_0, 0
$0092	$048C			IORWF	_custom_code_a, 1
;D_85_16F84A_Remote_v_5_3_2.c,204 :: 		}//if (TMR0 < 33)
$0093	$	L__custom_lower_24:
;D_85_16F84A_Remote_v_5_3_2.c,206 :: 		}//for(i = 0; i < bit_len; i++)
$0093	$	L__custom_lower_16:
;D_85_16F84A_Remote_v_5_3_2.c,175 :: 		for(i = 0; i < bit_len; i++)
$0093	$0A8D			INCF	_i, 1
;D_85_16F84A_Remote_v_5_3_2.c,206 :: 		}//for(i = 0; i < bit_len; i++)
$0094	$2856			GOTO	L__custom_lower_14
$0095	$	L__custom_lower_15:
;D_85_16F84A_Remote_v_5_3_2.c,215 :: 		}//_custom_lower
$0095	$0008			RETURN
$016E	$	__response:
;D_85_16F84A_Remote_v_5_3_2.c,129 :: 		void _response(void)
;D_85_16F84A_Remote_v_5_3_2.c,137 :: 		if (custom_code_a == 0x0A) {
$016E	$1303			BCF	STATUS, RP1
$016F	$1283			BCF	STATUS, RP0
$0170	$080C			MOVF	_custom_code_a, 0
$0171	$3A0A			XORLW	10
$0172	$1D03			BTFSS	STATUS, Z
$0173	$297A			GOTO	L__response_12
;D_85_16F84A_Remote_v_5_3_2.c,139 :: 		_pulse_u(1);
$0174	$3001			MOVLW	1
$0175	$0097			MOVWF	FARG__pulse_u+0
$0176	$3000			MOVLW	0
$0177	$0098			MOVWF	FARG__pulse_u+1
$0178	$20CE			CALL	__pulse_u
;D_85_16F84A_Remote_v_5_3_2.c,141 :: 		} else {
$0179	$297F			GOTO	L__response_13
$017A	$	L__response_12:
;D_85_16F84A_Remote_v_5_3_2.c,143 :: 		_pulse_u(2);
$017A	$3002			MOVLW	2
$017B	$0097			MOVWF	FARG__pulse_u+0
$017C	$3000			MOVLW	0
$017D	$0098			MOVWF	FARG__pulse_u+1
$017E	$20CE			CALL	__pulse_u
;D_85_16F84A_Remote_v_5_3_2.c,145 :: 		}
$017F	$	L__response_13:
;D_85_16F84A_Remote_v_5_3_2.c,164 :: 		}
$017F	$0008			RETURN
$0004	$	_interrupt:
$0004	$00CF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$0091			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$0090			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$0092			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0840			MOVF	STACK_0, 0
$000E	$009B			MOVWF	STSAVED_0
;D_85_16F84A_Remote_v_5_3_2.c,217 :: 		void interrupt(void)
;D_85_16F84A_Remote_v_5_3_2.c,228 :: 		INTCON &= 0x7F;  // interrupt => forbidden
$000F	$307F			MOVLW	127
$0010	$058B			ANDWF	INTCON, 1
;D_85_16F84A_Remote_v_5_3_2.c,229 :: 		INTCON &= 0xEF;  // INT interrupt => forbidden
$0011	$30EF			MOVLW	239
$0012	$058B			ANDWF	INTCON, 1
;D_85_16F84A_Remote_v_5_3_2.c,230 :: 		INTCON &= 0xFD;  // INT interrupt flag => cleared
$0013	$30FD			MOVLW	253
$0014	$058B			ANDWF	INTCON, 1
;D_85_16F84A_Remote_v_5_3_2.c,243 :: 		TMR0 = 0;
$0015	$0181			CLRF	TMR0, 1
;D_85_16F84A_Remote_v_5_3_2.c,253 :: 		_while_PORTB_0x01(0);
$0016	$0193			CLRF	FARG__while_PORTB_0x01+0
$0017	$0194			CLRF	FARG__while_PORTB_0x01+1
$0018	$2155			CALL	__while_PORTB_0x01
;D_85_16F84A_Remote_v_5_3_2.c,264 :: 		result = _judge_TMR_(156, 196);
$0019	$309C			MOVLW	156
$001A	$1303			BCF	STATUS, RP1
$001B	$1283			BCF	STATUS, RP0
$001C	$0093			MOVWF	FARG__judge_TMR_+0
$001D	$0194			CLRF	FARG__judge_TMR_+1
$001E	$30C4			MOVLW	196
$001F	$0095			MOVWF	FARG__judge_TMR_+2
$0020	$0196			CLRF	FARG__judge_TMR_+3
$0021	$2104			CALL	__judge_TMR_
$0022	$0840			MOVF	STACK_0, 0
$0023	$008E			MOVWF	_result
;D_85_16F84A_Remote_v_5_3_2.c,266 :: 		if (result == false) {
$0024	$0840			MOVF	STACK_0, 0
$0025	$3A00			XORLW	0
$0026	$1D03			BTFSS	STATUS, Z
$0027	$2829			GOTO	L_interrupt_25
;D_85_16F84A_Remote_v_5_3_2.c,270 :: 		return;
$0028	$2845			GOTO	L_Interrupt_end
;D_85_16F84A_Remote_v_5_3_2.c,272 :: 		}
$0029	$	L_interrupt_25:
;D_85_16F84A_Remote_v_5_3_2.c,284 :: 		TMR0 = 0;
$0029	$0181			CLRF	TMR0, 1
;D_85_16F84A_Remote_v_5_3_2.c,291 :: 		_while_PORTB_0x01(1);
$002A	$3001			MOVLW	1
$002B	$0093			MOVWF	FARG__while_PORTB_0x01+0
$002C	$3000			MOVLW	0
$002D	$0094			MOVWF	FARG__while_PORTB_0x01+1
$002E	$2155			CALL	__while_PORTB_0x01
;D_85_16F84A_Remote_v_5_3_2.c,298 :: 		result = _judge_TMR_(68, 108);
$002F	$3044			MOVLW	68
$0030	$1303			BCF	STATUS, RP1
$0031	$1283			BCF	STATUS, RP0
$0032	$0093			MOVWF	FARG__judge_TMR_+0
$0033	$3000			MOVLW	0
$0034	$0094			MOVWF	FARG__judge_TMR_+1
$0035	$306C			MOVLW	108
$0036	$0095			MOVWF	FARG__judge_TMR_+2
$0037	$3000			MOVLW	0
$0038	$0096			MOVWF	FARG__judge_TMR_+3
$0039	$2104			CALL	__judge_TMR_
$003A	$0840			MOVF	STACK_0, 0
$003B	$008E			MOVWF	_result
;D_85_16F84A_Remote_v_5_3_2.c,300 :: 		if (result == false) {
$003C	$0840			MOVF	STACK_0, 0
$003D	$3A00			XORLW	0
$003E	$1D03			BTFSS	STATUS, Z
$003F	$2841			GOTO	L_interrupt_26
;D_85_16F84A_Remote_v_5_3_2.c,304 :: 		return;
$0040	$2845			GOTO	L_Interrupt_end
;D_85_16F84A_Remote_v_5_3_2.c,306 :: 		}
$0041	$	L_interrupt_26:
;D_85_16F84A_Remote_v_5_3_2.c,313 :: 		_custom_lower();
$0041	$2050			CALL	__custom_lower
;D_85_16F84A_Remote_v_5_3_2.c,320 :: 		_response();
$0042	$216E			CALL	__response
;D_85_16F84A_Remote_v_5_3_2.c,328 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$0043	$160B			BSF	INTCON, 4
;D_85_16F84A_Remote_v_5_3_2.c,329 :: 		INTCON |= 0x80;
$0044	$178B			BSF	INTCON, 7
;D_85_16F84A_Remote_v_5_3_2.c,331 :: 		}//void interrupt(void)
$0045	$	L_Interrupt_end:
$0045	$081B			MOVF	STSAVED_0, 0
$0046	$00C0			MOVWF	STACK_0
$0047	$0812			MOVF	?savePCLATH, 0
$0048	$008A			MOVWF	PCLATH
$0049	$0810			MOVF	?saveFSR, 0
$004A	$0084			MOVWF	FSR
$004B	$0E11			SWAPF	?saveSTATUS, 0
$004C	$0083			MOVWF	STATUS
$004D	$0ECF			SWAPF	STACK_15, 1
$004E	$0E4F			SWAPF	STACK_15, 0
$004F	$0009			RETFIE
$0180	$	GlobalIniD_85_16F84A_Remote_v_5_3_2:
$0180	$3001			MOVLW	1
$0181	$1303			BCF	STATUS, RP1
$0182	$1283			BCF	STATUS, RP0
$0183	$008F			MOVWF	_LED_FLAG+0
$0184	$0008			RETURN
$0135	$	_main:
;D_85_16F84A_Remote_v_5_3_2.c,334 :: 		void main(void)
;D_85_16F84A_Remote_v_5_3_2.c,338 :: 		TRISA     = 0x00;
$0135	$2180			CALL	GlobalIniD_85_16F84A_Remote_v_5_3_2
$0136	$1683			BSF	STATUS, RP0
$0137	$0185			CLRF	TRISA, 1
;D_85_16F84A_Remote_v_5_3_2.c,339 :: 		PORTA     = 0x00;		//0000 0010
$0138	$1283			BCF	STATUS, RP0
$0139	$0185			CLRF	PORTA, 1
;D_85_16F84A_Remote_v_5_3_2.c,341 :: 		TRISB     = 0xFF;		// Input: RB0 ~ RB7
$013A	$30FF			MOVLW	255
$013B	$1683			BSF	STATUS, RP0
$013C	$0086			MOVWF	TRISB
;D_85_16F84A_Remote_v_5_3_2.c,343 :: 		OPTION_REG &= 0x7F;	// Pull-up => on
$013D	$307F			MOVLW	127
$013E	$0501			ANDWF	OPTION_REG, 0
$013F	$00C0			MOVWF	STACK_0
$0140	$0840			MOVF	STACK_0, 0
$0141	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_5_3_2.c,344 :: 		OPTION_REG &= 0xBF;	// INT interrupt => by 5V ~> 0V
$0142	$30BF			MOVLW	191
$0143	$05C0			ANDWF	STACK_0, 1
$0144	$0840			MOVF	STACK_0, 0
$0145	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_5_3_2.c,346 :: 		OPTION_REG &= 0xDF;	// Timer by clock
$0146	$30DF			MOVLW	223
$0147	$05C0			ANDWF	STACK_0, 1
$0148	$0840			MOVF	STACK_0, 0
$0149	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_5_3_2.c,347 :: 		OPTION_REG &= 0xF0;	// Prescaler => on
$014A	$30F0			MOVLW	240
$014B	$05C0			ANDWF	STACK_0, 1
$014C	$0840			MOVF	STACK_0, 0
$014D	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_5_3_2.c,348 :: 		OPTION_REG |= 0x07; // Prescaler => 1/256
$014E	$3007			MOVLW	7
$014F	$0440			IORWF	STACK_0, 0
$0150	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_5_3_2.c,356 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$0151	$160B			BSF	INTCON, 4
;D_85_16F84A_Remote_v_5_3_2.c,357 :: 		INTCON |= 0x80;
$0152	$178B			BSF	INTCON, 7
;D_85_16F84A_Remote_v_5_3_2.c,359 :: 		while(1)
$0153	$	L_main_27:
$0153	$2953			GOTO	L_main_27
;D_85_16F84A_Remote_v_5_3_2.c,367 :: 		}//void main(void)
$0154	$2954			GOTO	$
