;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 2014/06/11 21:41:32
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2838			GOTO	_main
$0058	$	_Mul_8x8_U:
$0058	$1303			BCF	STATUS, RP1
$0059	$1283			BCF	STATUS, RP0
$005A	$0840			MOVF	STACK_0, W
$005B	$00C1			MOVWF	STACK_1
$005C	$01C0			CLRF	STACK_0
$005D	$3008			MOVLW	8
$005E	$00CC			MOVWF	STACK_12
$005F	$0841			MOVF	STACK_1, W
$0060	$0CC4			RRF	STACK_4, F
$0061	$1803			BTFSC	STATUS, C
$0062	$2867			GOTO	$+5
$0063	$0BCC			DECFSZ	STACK_12, F
$0064	$2860			GOTO	$-4
$0065	$01C1			CLRF	STACK_1, F
$0066	$3400			RETLW	0
$0067	$1003			BCF	STATUS, C
$0068	$286C			GOTO	$+4
$0069	$0CC4			RRF	STACK_4, F
$006A	$1803			BTFSC	STATUS, C
$006B	$07C1			ADDWF	STACK_1, F
$006C	$0CC1			RRF	STACK_1, F
$006D	$0CC0			RRF	STACK_0, F
$006E	$0BCC			DECFSZ	STACK_12, F
$006F	$2869			GOTO	$-6
$0070	$0008			RETURN
$0004	$	_interrupt:
$0004	$00CF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$008E			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$008D			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$008F			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0840			MOVF	STACK_0, 0
$000E	$0090			MOVWF	STSAVED_0
;D_85_16F84A_Remote_v_4_2_0.c,15 :: 		void interrupt(void)
;D_85_16F84A_Remote_v_4_2_0.c,21 :: 		INTCON &= 0x7F;  // interrupt => forbidden
$000F	$307F			MOVLW	127
$0010	$058B			ANDWF	INTCON, 1
;D_85_16F84A_Remote_v_4_2_0.c,22 :: 		INTCON &= 0xEF;  // INT interrupt => forbidden
$0011	$30EF			MOVLW	239
$0012	$058B			ANDWF	INTCON, 1
;D_85_16F84A_Remote_v_4_2_0.c,23 :: 		INTCON &= 0xFD;  // INT interrupt flag => cleared
$0013	$30FD			MOVLW	253
$0014	$058B			ANDWF	INTCON, 1
;D_85_16F84A_Remote_v_4_2_0.c,26 :: 		if(LED_FLAG == 1)
$0015	$080C			MOVF	_LED_FLAG, 0
$0016	$3A01			XORLW	1
$0017	$1D03			BTFSS	STATUS, Z
$0018	$2823			GOTO	L_interrupt_0
;D_85_16F84A_Remote_v_4_2_0.c,29 :: 		PORTA = 0x01;
$0019	$3001			MOVLW	1
$001A	$0085			MOVWF	PORTA
;D_85_16F84A_Remote_v_4_2_0.c,31 :: 		LED_FLAG *= -1;
$001B	$080C			MOVF	_LED_FLAG, 0
$001C	$00C0			MOVWF	STACK_0
$001D	$30FF			MOVLW	255
$001E	$00C4			MOVWF	STACK_4
$001F	$2058			CALL	_mul_8x8_u
$0020	$0840			MOVF	STACK_0, 0
$0021	$008C			MOVWF	_LED_FLAG
;D_85_16F84A_Remote_v_4_2_0.c,33 :: 		} else {
$0022	$282B			GOTO	L_interrupt_1
$0023	$	L_interrupt_0:
;D_85_16F84A_Remote_v_4_2_0.c,36 :: 		PORTA = 0x00;
$0023	$0185			CLRF	PORTA, 1
;D_85_16F84A_Remote_v_4_2_0.c,38 :: 		LED_FLAG *= -1;
$0024	$080C			MOVF	_LED_FLAG, 0
$0025	$00C0			MOVWF	STACK_0
$0026	$30FF			MOVLW	255
$0027	$00C4			MOVWF	STACK_4
$0028	$2058			CALL	_mul_8x8_u
$0029	$0840			MOVF	STACK_0, 0
$002A	$008C			MOVWF	_LED_FLAG
;D_85_16F84A_Remote_v_4_2_0.c,40 :: 		}//if(LED_FLAG == 1)
$002B	$	L_interrupt_1:
;D_85_16F84A_Remote_v_4_2_0.c,123 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$002B	$160B			BSF	INTCON, 4
;D_85_16F84A_Remote_v_4_2_0.c,124 :: 		INTCON |= 0x80;
$002C	$178B			BSF	INTCON, 7
;D_85_16F84A_Remote_v_4_2_0.c,126 :: 		}//void interrupt(void)
$002D	$	L_Interrupt_end:
$002D	$0810			MOVF	STSAVED_0, 0
$002E	$00C0			MOVWF	STACK_0
$002F	$080F			MOVF	?savePCLATH, 0
$0030	$008A			MOVWF	PCLATH
$0031	$080D			MOVF	?saveFSR, 0
$0032	$0084			MOVWF	FSR
$0033	$0E0E			SWAPF	?saveSTATUS, 0
$0034	$0083			MOVWF	STATUS
$0035	$0ECF			SWAPF	STACK_15, 1
$0036	$0E4F			SWAPF	STACK_15, 0
$0037	$0009			RETFIE
$0071	$	GlobalIniD_85_16F84A_Remote_v_4_2_0:
$0071	$3001			MOVLW	1
$0072	$1303			BCF	STATUS, RP1
$0073	$1283			BCF	STATUS, RP0
$0074	$008C			MOVWF	_LED_FLAG+0
$0075	$0008			RETURN
$0038	$	_main:
;D_85_16F84A_Remote_v_4_2_0.c,129 :: 		void main(void)
;D_85_16F84A_Remote_v_4_2_0.c,133 :: 		TRISA     = 0x00;
$0038	$2071			CALL	GlobalIniD_85_16F84A_Remote_v_4_2_0
$0039	$1683			BSF	STATUS, RP0
$003A	$0185			CLRF	TRISA, 1
;D_85_16F84A_Remote_v_4_2_0.c,134 :: 		PORTA     = 0x00;		//0000 0010
$003B	$1283			BCF	STATUS, RP0
$003C	$0185			CLRF	PORTA, 1
;D_85_16F84A_Remote_v_4_2_0.c,136 :: 		TRISB     = 0xFF;		// Input: RB0 ~ RB7
$003D	$30FF			MOVLW	255
$003E	$1683			BSF	STATUS, RP0
$003F	$0086			MOVWF	TRISB
;D_85_16F84A_Remote_v_4_2_0.c,138 :: 		OPTION_REG &= 0x7F;	// Pull-up => on
$0040	$307F			MOVLW	127
$0041	$0501			ANDWF	OPTION_REG, 0
$0042	$00C0			MOVWF	STACK_0
$0043	$0840			MOVF	STACK_0, 0
$0044	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_4_2_0.c,139 :: 		OPTION_REG &= 0xBF;	// INT interrupt => by 5V ~> 0V
$0045	$30BF			MOVLW	191
$0046	$05C0			ANDWF	STACK_0, 1
$0047	$0840			MOVF	STACK_0, 0
$0048	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_4_2_0.c,140 :: 		OPTION_REG &= 0xDF;	// Timer by clock
$0049	$30DF			MOVLW	223
$004A	$05C0			ANDWF	STACK_0, 1
$004B	$0840			MOVF	STACK_0, 0
$004C	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_4_2_0.c,142 :: 		OPTION_REG &= 0xF0;	// Prescaler => on
$004D	$30F0			MOVLW	240
$004E	$05C0			ANDWF	STACK_0, 1
$004F	$0840			MOVF	STACK_0, 0
$0050	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_4_2_0.c,143 :: 		OPTION_REG |= 0x07; // Prescaler => 1/256
$0051	$3007			MOVLW	7
$0052	$0440			IORWF	STACK_0, 0
$0053	$0081			MOVWF	OPTION_REG
;D_85_16F84A_Remote_v_4_2_0.c,151 :: 		INTCON |= 0x10;        // INT interrupt => permitted
$0054	$160B			BSF	INTCON, 4
;D_85_16F84A_Remote_v_4_2_0.c,152 :: 		INTCON |= 0x80;
$0055	$178B			BSF	INTCON, 7
;D_85_16F84A_Remote_v_4_2_0.c,154 :: 		while(1)
$0056	$	L_main_2:
$0056	$2856			GOTO	L_main_2
;D_85_16F84A_Remote_v_4_2_0.c,162 :: 		}//void main(void)
$0057	$2857			GOTO	$
